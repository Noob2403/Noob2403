CCS PCM C Compiler, Version 5.112, 43599               09-Apr-23 16:36

               Filename:   D:\Project KTMT\Calculator\main.lst

               ROM used:   4568 words (56%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           95 (26%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C3,30
000D:  DATA EC,31
000E:  DATA 75,36
000F:  DATA 61,3A
0010:  DATA 6F,39
0011:  DATA 00,00
0012:  DATA 4E,34
0013:  DATA 61,38
0014:  DATA 20,26
0015:  DATA E1,34
0016:  DATA 00,01
0017:  DATA 45,39
0018:  DATA F2,37
0019:  DATA 72,00
001A:  DATA 4E,34
001B:  DATA 61,38
001C:  DATA 20,26
001D:  DATA E1,34
001E:  DATA 00,01
*
0189:  MOVF   0B,W
018A:  MOVWF  39
018B:  BCF    0B.7
018C:  BSF    03.5
018D:  BSF    03.6
018E:  BSF    0C.7
018F:  BSF    0C.0
0190:  NOP
0191:  NOP
0192:  BCF    03.5
0193:  BCF    03.6
0194:  BTFSC  39.7
0195:  BSF    0B.7
0196:  BSF    03.6
0197:  MOVF   0C,W
0198:  ANDLW  7F
0199:  BTFSC  03.2
019A:  GOTO   1DD
019B:  BCF    03.6
019C:  MOVWF  39
019D:  BSF    03.6
019E:  MOVF   0D,W
019F:  BCF    03.6
01A0:  MOVWF  3A
01A1:  BSF    03.6
01A2:  MOVF   0F,W
01A3:  BCF    03.6
01A4:  MOVWF  3B
01A5:  MOVF   39,W
01A6:  MOVWF  4A
01A7:  CALL   144
01A8:  MOVF   3A,W
01A9:  BSF    03.6
01AA:  MOVWF  0D
01AB:  BCF    03.6
01AC:  MOVF   3B,W
01AD:  BSF    03.6
01AE:  MOVWF  0F
01AF:  BCF    03.6
01B0:  MOVF   0B,W
01B1:  MOVWF  3C
01B2:  BCF    0B.7
01B3:  BSF    03.5
01B4:  BSF    03.6
01B5:  BSF    0C.7
01B6:  BSF    0C.0
01B7:  NOP
01B8:  NOP
01B9:  BCF    03.5
01BA:  BCF    03.6
01BB:  BTFSC  3C.7
01BC:  BSF    0B.7
01BD:  BSF    03.6
01BE:  RLF    0C,W
01BF:  RLF    0E,W
01C0:  ANDLW  7F
01C1:  BTFSC  03.2
01C2:  GOTO   1DD
01C3:  BCF    03.6
01C4:  MOVWF  39
01C5:  BSF    03.6
01C6:  MOVF   0D,W
01C7:  BCF    03.6
01C8:  MOVWF  3A
01C9:  BSF    03.6
01CA:  MOVF   0F,W
01CB:  BCF    03.6
01CC:  MOVWF  3B
01CD:  MOVF   39,W
01CE:  MOVWF  4A
01CF:  CALL   144
01D0:  MOVF   3A,W
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  BCF    03.6
01D4:  MOVF   3B,W
01D5:  BSF    03.6
01D6:  MOVWF  0F
01D7:  INCF   0D,F
01D8:  BTFSC  03.2
01D9:  INCF   0F,F
01DA:  BCF    03.6
01DB:  GOTO   189
01DC:  BSF    03.6
01DD:  BCF    03.6
01DE:  RETURN
01DF:  MOVF   00,F
01E0:  BTFSC  03.2
01E1:  GOTO   1F4
01E2:  CLRF   3A
01E3:  MOVF   04,W
01E4:  MOVWF  39
01E5:  BCF    3A.0
01E6:  BTFSC  03.7
01E7:  BSF    3A.0
01E8:  MOVF   00,W
01E9:  MOVWF  4A
01EA:  CALL   144
01EB:  MOVF   39,W
01EC:  MOVWF  04
01ED:  BCF    03.7
01EE:  BTFSC  3A.0
01EF:  BSF    03.7
01F0:  INCF   04,F
01F1:  BTFSC  03.2
01F2:  INCF   05,F
01F3:  GOTO   1DF
01F4:  BCF    0A.3
01F5:  BSF    0A.4
01F6:  GOTO   042 (RETURN)
*
0288:  BCF    0A.0
0289:  BSF    0A.1
028A:  BCF    0A.2
028B:  ADDWF  02,F
028C:  GOTO   263
028D:  GOTO   26A
028E:  GOTO   271
028F:  GOTO   278
0290:  GOTO   27F
*
033E:  MOVF   65,W
033F:  BTFSC  03.2
0340:  GOTO   3AE
0341:  MOVWF  6D
0342:  MOVF   69,W
0343:  BTFSC  03.2
0344:  GOTO   3AE
0345:  ADDWF  6D,F
0346:  BTFSC  03.0
0347:  GOTO   34F
0348:  MOVLW  7F
0349:  SUBWF  6D,F
034A:  BTFSS  03.0
034B:  GOTO   3AE
034C:  BTFSC  03.2
034D:  GOTO   3AE
034E:  GOTO   353
034F:  MOVLW  81
0350:  ADDWF  6D,F
0351:  BTFSC  03.0
0352:  GOTO   3AE
0353:  MOVF   6D,W
0354:  MOVWF  77
0355:  CLRF   78
0356:  CLRF   79
0357:  CLRF   7A
0358:  MOVF   66,W
0359:  MOVWF  71
035A:  BSF    71.7
035B:  MOVF   67,W
035C:  MOVWF  70
035D:  MOVF   68,W
035E:  MOVWF  6F
035F:  MOVLW  18
0360:  MOVWF  6D
0361:  CLRF   6E
0362:  BTFSS  6F.0
0363:  GOTO   37C
0364:  MOVF   6C,W
0365:  ADDWF  7A,F
0366:  BTFSS  03.0
0367:  GOTO   36E
0368:  INCF   79,F
0369:  BTFSS  03.2
036A:  GOTO   36E
036B:  INCF   78,F
036C:  BTFSC  03.2
036D:  BSF    6E.7
036E:  MOVF   6B,W
036F:  ADDWF  79,F
0370:  BTFSS  03.0
0371:  GOTO   375
0372:  INCF   78,F
0373:  BTFSC  03.2
0374:  BSF    6E.7
0375:  MOVF   6A,W
0376:  MOVWF  67
0377:  BSF    67.7
0378:  MOVF   67,W
0379:  ADDWF  78,F
037A:  BTFSC  03.0
037B:  BSF    6E.7
037C:  RLF    6E,F
037D:  RRF    78,F
037E:  RRF    79,F
037F:  RRF    7A,F
0380:  RRF    71,F
0381:  RRF    70,F
0382:  RRF    6F,F
0383:  BCF    03.0
0384:  DECFSZ 6D,F
0385:  GOTO   361
0386:  MOVLW  01
0387:  ADDWF  77,F
0388:  BTFSC  03.0
0389:  GOTO   3AE
038A:  BTFSC  78.7
038B:  GOTO   393
038C:  RLF    71,F
038D:  RLF    7A,F
038E:  RLF    79,F
038F:  RLF    78,F
0390:  DECF   77,F
0391:  BTFSC  03.2
0392:  GOTO   3AE
0393:  BTFSS  71.7
0394:  GOTO   3A4
0395:  INCF   7A,F
0396:  BTFSS  03.2
0397:  GOTO   3A4
0398:  INCF   79,F
0399:  BTFSS  03.2
039A:  GOTO   3A4
039B:  INCF   78,F
039C:  BTFSS  03.2
039D:  GOTO   3A4
039E:  RRF    78,F
039F:  RRF    79,F
03A0:  RRF    7A,F
03A1:  INCF   77,F
03A2:  BTFSC  03.2
03A3:  GOTO   3AE
03A4:  MOVF   66,W
03A5:  MOVWF  6E
03A6:  MOVF   6A,W
03A7:  XORWF  6E,F
03A8:  BTFSS  6E.7
03A9:  GOTO   3AC
03AA:  BSF    78.7
03AB:  GOTO   3B2
03AC:  BCF    78.7
03AD:  GOTO   3B2
03AE:  CLRF   77
03AF:  CLRF   78
03B0:  CLRF   79
03B1:  CLRF   7A
03B2:  RETURN
03B3:  MOVLW  8E
03B4:  MOVWF  77
03B5:  MOVF   6A,W
03B6:  MOVWF  78
03B7:  MOVF   69,W
03B8:  MOVWF  79
03B9:  CLRF   7A
03BA:  MOVF   78,F
03BB:  BTFSS  03.2
03BC:  GOTO   3C7
03BD:  MOVF   79,W
03BE:  MOVWF  78
03BF:  CLRF   79
03C0:  MOVLW  08
03C1:  SUBWF  77,F
03C2:  MOVF   78,F
03C3:  BTFSS  03.2
03C4:  GOTO   3C7
03C5:  CLRF   77
03C6:  GOTO   3CF
03C7:  BCF    03.0
03C8:  BTFSC  78.7
03C9:  GOTO   3CE
03CA:  RLF    79,F
03CB:  RLF    78,F
03CC:  DECF   77,F
03CD:  GOTO   3C7
03CE:  BCF    78.7
03CF:  RETURN
*
03D8:  MOVLW  80
03D9:  BTFSC  03.1
03DA:  XORWF  6E,F
03DB:  BSF    03.5
03DC:  CLRF   22
03DD:  CLRF   23
03DE:  BCF    03.5
03DF:  MOVF   6A,W
03E0:  BSF    03.5
03E1:  MOVWF  21
03E2:  BCF    03.5
03E3:  MOVF   6E,W
03E4:  BSF    03.5
03E5:  XORWF  21,F
03E6:  BCF    03.5
03E7:  MOVF   69,W
03E8:  BTFSC  03.2
03E9:  GOTO   4EE
03EA:  BSF    03.5
03EB:  MOVWF  20
03EC:  MOVWF  77
03ED:  BCF    03.5
03EE:  MOVF   6D,W
03EF:  BTFSC  03.2
03F0:  GOTO   4FB
03F1:  BSF    03.5
03F2:  SUBWF  20,F
03F3:  BTFSC  03.2
03F4:  GOTO   488
03F5:  BTFSS  03.0
03F6:  GOTO   43A
03F7:  BCF    03.5
03F8:  MOVF   6E,W
03F9:  BSF    03.5
03FA:  MOVWF  26
03FB:  BSF    26.7
03FC:  BCF    03.5
03FD:  MOVF   6F,W
03FE:  BSF    03.5
03FF:  MOVWF  25
0400:  MOVF   70,W
0401:  MOVWF  24
0402:  CLRF   23
0403:  BCF    03.0
0404:  RRF    26,F
0405:  RRF    25,F
0406:  RRF    24,F
0407:  RRF    23,F
0408:  DECFSZ 20,F
0409:  GOTO   402
040A:  BTFSS  21.7
040B:  GOTO   40F
040C:  BSF    22.0
040D:  GOTO   514
040E:  BCF    22.0
040F:  BCF    20.0
0410:  BSF    22.4
0411:  MOVLW  6C
0412:  MOVWF  04
0413:  BCF    03.7
0414:  GOTO   529
0415:  BCF    22.4
0416:  BTFSC  21.7
0417:  GOTO   422
0418:  BTFSS  20.0
0419:  GOTO   42D
041A:  RRF    26,F
041B:  RRF    25,F
041C:  RRF    24,F
041D:  RRF    23,F
041E:  INCF   77,F
041F:  BTFSC  03.2
0420:  GOTO   50F
0421:  GOTO   42D
0422:  BTFSC  26.7
0423:  GOTO   430
0424:  BCF    03.0
0425:  RLF    23,F
0426:  RLF    24,F
0427:  RLF    25,F
0428:  RLF    26,F
0429:  DECF   77,F
042A:  BTFSC  03.2
042B:  GOTO   50F
042C:  GOTO   422
042D:  BSF    22.6
042E:  GOTO   4AE
042F:  BCF    22.6
0430:  BCF    03.5
0431:  MOVF   6A,W
0432:  BSF    03.5
0433:  MOVWF  21
0434:  BTFSS  21.7
0435:  GOTO   438
0436:  BSF    26.7
0437:  GOTO   508
0438:  BCF    26.7
0439:  GOTO   508
043A:  BCF    03.5
043B:  MOVF   6D,W
043C:  BSF    03.5
043D:  MOVWF  20
043E:  MOVWF  77
043F:  BCF    03.5
0440:  MOVF   69,W
0441:  BSF    03.5
0442:  SUBWF  20,F
0443:  BCF    03.5
0444:  MOVF   6A,W
0445:  BSF    03.5
0446:  MOVWF  26
0447:  BSF    26.7
0448:  BCF    03.5
0449:  MOVF   6B,W
044A:  BSF    03.5
044B:  MOVWF  25
044C:  BCF    03.5
044D:  MOVF   6C,W
044E:  BSF    03.5
044F:  MOVWF  24
0450:  CLRF   23
0451:  BCF    03.0
0452:  RRF    26,F
0453:  RRF    25,F
0454:  RRF    24,F
0455:  RRF    23,F
0456:  DECFSZ 20,F
0457:  GOTO   450
0458:  BTFSS  21.7
0459:  GOTO   45D
045A:  BSF    22.1
045B:  GOTO   514
045C:  BCF    22.1
045D:  BCF    20.0
045E:  BSF    22.5
045F:  MOVLW  70
0460:  MOVWF  04
0461:  BCF    03.7
0462:  GOTO   529
0463:  BCF    22.5
0464:  BTFSC  21.7
0465:  GOTO   470
0466:  BTFSS  20.0
0467:  GOTO   47B
0468:  RRF    26,F
0469:  RRF    25,F
046A:  RRF    24,F
046B:  RRF    23,F
046C:  INCF   77,F
046D:  BTFSC  03.2
046E:  GOTO   50F
046F:  GOTO   47B
0470:  BTFSC  26.7
0471:  GOTO   47E
0472:  BCF    03.0
0473:  RLF    23,F
0474:  RLF    24,F
0475:  RLF    25,F
0476:  RLF    26,F
0477:  DECF   77,F
0478:  BTFSC  03.2
0479:  GOTO   50F
047A:  GOTO   470
047B:  BSF    22.7
047C:  GOTO   4AE
047D:  BCF    22.7
047E:  BCF    03.5
047F:  MOVF   6E,W
0480:  BSF    03.5
0481:  MOVWF  21
0482:  BTFSS  21.7
0483:  GOTO   486
0484:  BSF    26.7
0485:  GOTO   508
0486:  BCF    26.7
0487:  GOTO   508
0488:  BCF    03.5
0489:  MOVF   6E,W
048A:  BSF    03.5
048B:  MOVWF  26
048C:  BSF    26.7
048D:  BCF    03.5
048E:  MOVF   6F,W
048F:  BSF    03.5
0490:  MOVWF  25
0491:  MOVF   70,W
0492:  MOVWF  24
0493:  BTFSS  21.7
0494:  GOTO   499
0495:  BCF    26.7
0496:  BSF    22.2
0497:  GOTO   514
0498:  BCF    22.2
0499:  CLRF   23
049A:  BCF    20.0
049B:  MOVLW  6C
049C:  MOVWF  04
049D:  BCF    03.7
049E:  GOTO   529
049F:  BTFSC  21.7
04A0:  GOTO   4C4
04A1:  BCF    03.5
04A2:  MOVF   6A,W
04A3:  BSF    03.5
04A4:  MOVWF  21
04A5:  BTFSS  20.0
04A6:  GOTO   4AE
04A7:  RRF    26,F
04A8:  RRF    25,F
04A9:  RRF    24,F
04AA:  RRF    23,F
04AB:  INCF   77,F
04AC:  BTFSC  03.2
04AD:  GOTO   50F
04AE:  BTFSS  23.7
04AF:  GOTO   4BF
04B0:  INCF   24,F
04B1:  BTFSS  03.2
04B2:  GOTO   4BF
04B3:  INCF   25,F
04B4:  BTFSS  03.2
04B5:  GOTO   4BF
04B6:  INCF   26,F
04B7:  BTFSS  03.2
04B8:  GOTO   4BF
04B9:  RRF    26,F
04BA:  RRF    25,F
04BB:  RRF    24,F
04BC:  INCF   77,F
04BD:  BTFSC  03.2
04BE:  GOTO   50F
04BF:  BTFSC  22.6
04C0:  GOTO   42F
04C1:  BTFSC  22.7
04C2:  GOTO   47D
04C3:  GOTO   4E7
04C4:  MOVLW  80
04C5:  XORWF  26,F
04C6:  BTFSS  26.7
04C7:  GOTO   4CE
04C8:  GOTO   514
04C9:  BCF    03.5
04CA:  MOVF   6E,W
04CB:  BSF    03.5
04CC:  MOVWF  21
04CD:  GOTO   4DD
04CE:  BCF    03.5
04CF:  MOVF   6A,W
04D0:  BSF    03.5
04D1:  MOVWF  21
04D2:  MOVF   26,F
04D3:  BTFSS  03.2
04D4:  GOTO   4DD
04D5:  MOVF   25,F
04D6:  BTFSS  03.2
04D7:  GOTO   4DD
04D8:  MOVF   24,F
04D9:  BTFSS  03.2
04DA:  GOTO   4DD
04DB:  CLRF   77
04DC:  GOTO   508
04DD:  BTFSC  26.7
04DE:  GOTO   4E7
04DF:  BCF    03.0
04E0:  RLF    23,F
04E1:  RLF    24,F
04E2:  RLF    25,F
04E3:  RLF    26,F
04E4:  DECFSZ 77,F
04E5:  GOTO   4DD
04E6:  GOTO   50F
04E7:  BTFSS  21.7
04E8:  GOTO   4EB
04E9:  BSF    26.7
04EA:  GOTO   508
04EB:  BCF    26.7
04EC:  GOTO   508
04ED:  BCF    03.5
04EE:  MOVF   6D,W
04EF:  MOVWF  77
04F0:  MOVF   6E,W
04F1:  BSF    03.5
04F2:  MOVWF  26
04F3:  BCF    03.5
04F4:  MOVF   6F,W
04F5:  BSF    03.5
04F6:  MOVWF  25
04F7:  MOVF   70,W
04F8:  MOVWF  24
04F9:  GOTO   508
04FA:  BCF    03.5
04FB:  MOVF   69,W
04FC:  MOVWF  77
04FD:  MOVF   6A,W
04FE:  BSF    03.5
04FF:  MOVWF  26
0500:  BCF    03.5
0501:  MOVF   6B,W
0502:  BSF    03.5
0503:  MOVWF  25
0504:  BCF    03.5
0505:  MOVF   6C,W
0506:  BSF    03.5
0507:  MOVWF  24
0508:  MOVF   26,W
0509:  MOVWF  78
050A:  MOVF   25,W
050B:  MOVWF  79
050C:  MOVF   24,W
050D:  MOVWF  7A
050E:  GOTO   547
050F:  CLRF   77
0510:  CLRF   78
0511:  CLRF   79
0512:  CLRF   7A
0513:  GOTO   547
0514:  CLRF   23
0515:  COMF   24,F
0516:  COMF   25,F
0517:  COMF   26,F
0518:  COMF   23,F
0519:  INCF   23,F
051A:  BTFSS  03.2
051B:  GOTO   522
051C:  INCF   24,F
051D:  BTFSS  03.2
051E:  GOTO   522
051F:  INCF   25,F
0520:  BTFSC  03.2
0521:  INCF   26,F
0522:  BTFSC  22.0
0523:  GOTO   40E
0524:  BTFSC  22.1
0525:  GOTO   45C
0526:  BTFSC  22.2
0527:  GOTO   498
0528:  GOTO   4C9
0529:  MOVF   00,W
052A:  ADDWF  24,F
052B:  BTFSS  03.0
052C:  GOTO   533
052D:  INCF   25,F
052E:  BTFSS  03.2
052F:  GOTO   533
0530:  INCF   26,F
0531:  BTFSC  03.2
0532:  BSF    20.0
0533:  DECF   04,F
0534:  MOVF   00,W
0535:  ADDWF  25,F
0536:  BTFSS  03.0
0537:  GOTO   53B
0538:  INCF   26,F
0539:  BTFSC  03.2
053A:  BSF    20.0
053B:  DECF   04,F
053C:  MOVF   00,W
053D:  BTFSS  00.7
053E:  XORLW  80
053F:  ADDWF  26,F
0540:  BTFSC  03.0
0541:  BSF    20.0
0542:  BTFSC  22.4
0543:  GOTO   415
0544:  BTFSC  22.5
0545:  GOTO   463
0546:  GOTO   49F
0547:  BCF    03.5
0548:  RETURN
0549:  MOVF   66,W
054A:  MOVWF  6D
054B:  MOVF   6A,W
054C:  XORWF  6D,F
054D:  BTFSS  6D.7
054E:  GOTO   554
054F:  BCF    03.2
0550:  BCF    03.0
0551:  BTFSC  66.7
0552:  BSF    03.0
0553:  GOTO   587
0554:  MOVF   66,W
0555:  MOVWF  6D
0556:  MOVF   69,W
0557:  MOVWF  6E
0558:  MOVF   65,W
0559:  SUBWF  6E,F
055A:  BTFSC  03.2
055B:  GOTO   562
055C:  BTFSS  6D.7
055D:  GOTO   587
055E:  MOVF   03,W
055F:  XORLW  01
0560:  MOVWF  03
0561:  GOTO   587
0562:  MOVF   6A,W
0563:  MOVWF  6E
0564:  MOVF   66,W
0565:  SUBWF  6E,F
0566:  BTFSC  03.2
0567:  GOTO   56E
0568:  BTFSS  6D.7
0569:  GOTO   587
056A:  MOVF   03,W
056B:  XORLW  01
056C:  MOVWF  03
056D:  GOTO   587
056E:  MOVF   6B,W
056F:  MOVWF  6E
0570:  MOVF   67,W
0571:  SUBWF  6E,F
0572:  BTFSC  03.2
0573:  GOTO   57A
0574:  BTFSS  6D.7
0575:  GOTO   587
0576:  MOVF   03,W
0577:  XORLW  01
0578:  MOVWF  03
0579:  GOTO   587
057A:  MOVF   6C,W
057B:  MOVWF  6E
057C:  MOVF   68,W
057D:  SUBWF  6E,F
057E:  BTFSC  03.2
057F:  GOTO   586
0580:  BTFSS  6D.7
0581:  GOTO   587
0582:  MOVF   03,W
0583:  XORLW  01
0584:  MOVWF  03
0585:  GOTO   587
0586:  BCF    03.0
0587:  RETURN
0588:  BTFSC  03.1
0589:  GOTO   58D
058A:  MOVLW  52
058B:  MOVWF  04
058C:  BCF    03.7
058D:  CLRF   77
058E:  CLRF   78
058F:  CLRF   79
0590:  CLRF   7A
0591:  CLRF   52
0592:  CLRF   53
0593:  CLRF   54
0594:  CLRF   55
0595:  MOVF   51,W
0596:  IORWF  50,W
0597:  IORWF  4F,W
0598:  IORWF  4E,W
0599:  BTFSC  03.2
059A:  GOTO   5CB
059B:  MOVLW  20
059C:  MOVWF  56
059D:  BCF    03.0
059E:  RLF    4A,F
059F:  RLF    4B,F
05A0:  RLF    4C,F
05A1:  RLF    4D,F
05A2:  RLF    52,F
05A3:  RLF    53,F
05A4:  RLF    54,F
05A5:  RLF    55,F
05A6:  MOVF   51,W
05A7:  SUBWF  55,W
05A8:  BTFSS  03.2
05A9:  GOTO   5B4
05AA:  MOVF   50,W
05AB:  SUBWF  54,W
05AC:  BTFSS  03.2
05AD:  GOTO   5B4
05AE:  MOVF   4F,W
05AF:  SUBWF  53,W
05B0:  BTFSS  03.2
05B1:  GOTO   5B4
05B2:  MOVF   4E,W
05B3:  SUBWF  52,W
05B4:  BTFSS  03.0
05B5:  GOTO   5C5
05B6:  MOVF   4E,W
05B7:  SUBWF  52,F
05B8:  MOVF   4F,W
05B9:  BTFSS  03.0
05BA:  INCFSZ 4F,W
05BB:  SUBWF  53,F
05BC:  MOVF   50,W
05BD:  BTFSS  03.0
05BE:  INCFSZ 50,W
05BF:  SUBWF  54,F
05C0:  MOVF   51,W
05C1:  BTFSS  03.0
05C2:  INCFSZ 51,W
05C3:  SUBWF  55,F
05C4:  BSF    03.0
05C5:  RLF    77,F
05C6:  RLF    78,F
05C7:  RLF    79,F
05C8:  RLF    7A,F
05C9:  DECFSZ 56,F
05CA:  GOTO   59D
05CB:  MOVF   52,W
05CC:  MOVWF  00
05CD:  INCF   04,F
05CE:  MOVF   53,W
05CF:  MOVWF  00
05D0:  INCF   04,F
05D1:  MOVF   54,W
05D2:  MOVWF  00
05D3:  INCF   04,F
05D4:  MOVF   55,W
05D5:  MOVWF  00
05D6:  RETURN
05D7:  MOVF   04,W
05D8:  MOVWF  42
05D9:  MOVF   41,W
05DA:  MOVWF  44
05DB:  BTFSC  03.2
05DC:  GOTO   5F6
05DD:  MOVF   40,W
05DE:  MOVWF  68
05DF:  MOVF   3F,W
05E0:  MOVWF  67
05E1:  MOVF   3E,W
05E2:  MOVWF  66
05E3:  MOVF   3D,W
05E4:  MOVWF  65
05E5:  CLRF   6C
05E6:  CLRF   6B
05E7:  MOVLW  20
05E8:  MOVWF  6A
05E9:  MOVLW  82
05EA:  MOVWF  69
05EB:  CALL   33E
05EC:  MOVF   7A,W
05ED:  MOVWF  40
05EE:  MOVF   79,W
05EF:  MOVWF  3F
05F0:  MOVF   78,W
05F1:  MOVWF  3E
05F2:  MOVF   77,W
05F3:  MOVWF  3D
05F4:  DECFSZ 44,F
05F5:  GOTO   5DD
05F6:  MOVF   40,W
05F7:  MOVWF  4D
05F8:  MOVF   3F,W
05F9:  MOVWF  4C
05FA:  MOVF   3E,W
05FB:  MOVWF  4B
05FC:  MOVF   3D,W
05FD:  MOVWF  4A
05FE:  MOVF   4A,W
05FF:  SUBLW  B6
0600:  MOVWF  4A
0601:  CLRF   7A
0602:  MOVF   4B,W
0603:  MOVWF  4E
0604:  BSF    4B.7
0605:  BCF    03.0
0606:  RRF    4B,F
0607:  RRF    4C,F
0608:  RRF    4D,F
0609:  RRF    7A,F
060A:  RRF    79,F
060B:  RRF    78,F
060C:  RRF    77,F
060D:  DECFSZ 4A,F
060E:  GOTO   605
060F:  BTFSS  4E.7
0610:  GOTO   61C
0611:  COMF   77,F
0612:  COMF   78,F
0613:  COMF   79,F
0614:  COMF   7A,F
0615:  INCF   77,F
0616:  BTFSC  03.2
0617:  INCF   78,F
0618:  BTFSC  03.2
0619:  INCF   79,F
061A:  BTFSC  03.2
061B:  INCF   7A,F
061C:  MOVF   7A,W
061D:  MOVWF  40
061E:  MOVF   79,W
061F:  MOVWF  3F
0620:  MOVF   78,W
0621:  MOVWF  3E
0622:  MOVF   77,W
0623:  MOVWF  3D
0624:  BTFSS  40.7
0625:  GOTO   633
0626:  DECF   42,F
0627:  BSF    42.5
0628:  COMF   3D,F
0629:  COMF   3E,F
062A:  COMF   3F,F
062B:  COMF   40,F
062C:  INCF   3D,F
062D:  BTFSC  03.2
062E:  INCF   3E,F
062F:  BTFSC  03.2
0630:  INCF   3F,F
0631:  BTFSC  03.2
0632:  INCF   40,F
0633:  MOVLW  3B
0634:  MOVWF  49
0635:  MOVLW  9A
0636:  MOVWF  48
0637:  MOVLW  CA
0638:  MOVWF  47
0639:  CLRF   46
063A:  MOVLW  0A
063B:  MOVWF  44
063C:  MOVF   41,W
063D:  BTFSC  03.2
063E:  INCF   42,F
063F:  BSF    03.1
0640:  MOVLW  3D
0641:  MOVWF  04
0642:  BCF    03.7
0643:  MOVF   40,W
0644:  MOVWF  4D
0645:  MOVF   3F,W
0646:  MOVWF  4C
0647:  MOVF   3E,W
0648:  MOVWF  4B
0649:  MOVF   3D,W
064A:  MOVWF  4A
064B:  MOVF   49,W
064C:  MOVWF  51
064D:  MOVF   48,W
064E:  MOVWF  50
064F:  MOVF   47,W
0650:  MOVWF  4F
0651:  MOVF   46,W
0652:  MOVWF  4E
0653:  CALL   588
0654:  MOVF   78,W
0655:  MOVF   77,F
0656:  BTFSS  03.2
0657:  GOTO   66B
0658:  INCF   41,W
0659:  SUBWF  44,W
065A:  BTFSC  03.2
065B:  GOTO   66B
065C:  MOVF   42,W
065D:  BTFSC  03.2
065E:  GOTO   66D
065F:  ANDLW  0F
0660:  SUBWF  44,W
0661:  BTFSC  03.2
0662:  GOTO   665
0663:  BTFSC  03.0
0664:  GOTO   69D
0665:  BTFSC  42.7
0666:  GOTO   69D
0667:  BTFSC  42.6
0668:  GOTO   66D
0669:  MOVLW  20
066A:  GOTO   699
066B:  MOVLW  20
066C:  ANDWF  42,F
066D:  BTFSS  42.5
066E:  GOTO   67B
066F:  BCF    42.5
0670:  MOVF   41,W
0671:  BTFSS  03.2
0672:  DECF   42,F
0673:  MOVF   77,W
0674:  MOVWF  42
0675:  MOVLW  2D
0676:  MOVWF  4A
0677:  CALL   144
0678:  MOVF   42,W
0679:  MOVWF  77
067A:  CLRF   42
067B:  MOVF   41,W
067C:  SUBWF  44,W
067D:  BTFSS  03.2
067E:  GOTO   689
067F:  MOVF   77,W
0680:  MOVWF  42
0681:  MOVLW  2E
0682:  MOVWF  4A
0683:  CALL   144
0684:  MOVF   42,W
0685:  MOVWF  77
0686:  MOVLW  20
0687:  ANDWF  42,F
0688:  MOVLW  00
0689:  MOVLW  30
068A:  BTFSS  42.5
068B:  GOTO   699
068C:  BCF    42.5
068D:  MOVF   41,W
068E:  BTFSS  03.2
068F:  DECF   42,F
0690:  MOVF   77,W
0691:  MOVWF  42
0692:  MOVLW  2D
0693:  MOVWF  4A
0694:  CALL   144
0695:  MOVF   42,W
0696:  MOVWF  77
0697:  CLRF   42
0698:  MOVLW  30
0699:  ADDWF  77,F
069A:  MOVF   77,W
069B:  MOVWF  4A
069C:  CALL   144
069D:  BCF    03.1
069E:  MOVF   49,W
069F:  MOVWF  4D
06A0:  MOVF   48,W
06A1:  MOVWF  4C
06A2:  MOVF   47,W
06A3:  MOVWF  4B
06A4:  MOVF   46,W
06A5:  MOVWF  4A
06A6:  CLRF   51
06A7:  CLRF   50
06A8:  CLRF   4F
06A9:  MOVLW  0A
06AA:  MOVWF  4E
06AB:  CALL   588
06AC:  MOVF   7A,W
06AD:  MOVWF  49
06AE:  MOVF   79,W
06AF:  MOVWF  48
06B0:  MOVF   78,W
06B1:  MOVWF  47
06B2:  MOVF   77,W
06B3:  MOVWF  46
06B4:  DECFSZ 44,F
06B5:  GOTO   63F
06B6:  RETURN
06B7:  MOVF   5E,W
06B8:  BTFSC  03.2
06B9:  GOTO   77C
06BA:  MOVWF  6A
06BB:  MOVF   62,W
06BC:  BTFSC  03.2
06BD:  GOTO   77C
06BE:  SUBWF  6A,F
06BF:  BTFSS  03.0
06C0:  GOTO   6C6
06C1:  MOVLW  7F
06C2:  ADDWF  6A,F
06C3:  BTFSC  03.0
06C4:  GOTO   77C
06C5:  GOTO   6CC
06C6:  MOVLW  81
06C7:  SUBWF  6A,F
06C8:  BTFSS  03.0
06C9:  GOTO   77C
06CA:  BTFSC  03.2
06CB:  GOTO   77C
06CC:  MOVF   6A,W
06CD:  MOVWF  77
06CE:  CLRF   78
06CF:  CLRF   79
06D0:  CLRF   7A
06D1:  CLRF   69
06D2:  MOVF   5F,W
06D3:  MOVWF  68
06D4:  BSF    68.7
06D5:  MOVF   60,W
06D6:  MOVWF  67
06D7:  MOVF   61,W
06D8:  MOVWF  66
06D9:  MOVLW  19
06DA:  MOVWF  6A
06DB:  MOVF   65,W
06DC:  SUBWF  66,F
06DD:  BTFSC  03.0
06DE:  GOTO   6EF
06DF:  MOVLW  01
06E0:  SUBWF  67,F
06E1:  BTFSC  03.0
06E2:  GOTO   6EF
06E3:  SUBWF  68,F
06E4:  BTFSC  03.0
06E5:  GOTO   6EF
06E6:  SUBWF  69,F
06E7:  BTFSC  03.0
06E8:  GOTO   6EF
06E9:  INCF   69,F
06EA:  INCF   68,F
06EB:  INCF   67,F
06EC:  MOVF   65,W
06ED:  ADDWF  66,F
06EE:  GOTO   721
06EF:  MOVF   64,W
06F0:  SUBWF  67,F
06F1:  BTFSC  03.0
06F2:  GOTO   70A
06F3:  MOVLW  01
06F4:  SUBWF  68,F
06F5:  BTFSC  03.0
06F6:  GOTO   70A
06F7:  SUBWF  69,F
06F8:  BTFSC  03.0
06F9:  GOTO   70A
06FA:  INCF   69,F
06FB:  INCF   68,F
06FC:  MOVF   64,W
06FD:  ADDWF  67,F
06FE:  MOVF   65,W
06FF:  ADDWF  66,F
0700:  BTFSS  03.0
0701:  GOTO   721
0702:  INCF   67,F
0703:  BTFSS  03.2
0704:  GOTO   721
0705:  INCF   68,F
0706:  BTFSS  03.2
0707:  GOTO   721
0708:  INCF   69,F
0709:  GOTO   721
070A:  MOVF   63,W
070B:  IORLW  80
070C:  SUBWF  68,F
070D:  BTFSC  03.0
070E:  GOTO   720
070F:  MOVLW  01
0710:  SUBWF  69,F
0711:  BTFSC  03.0
0712:  GOTO   720
0713:  INCF   69,F
0714:  MOVF   63,W
0715:  IORLW  80
0716:  ADDWF  68,F
0717:  MOVF   64,W
0718:  ADDWF  67,F
0719:  BTFSS  03.0
071A:  GOTO   6FE
071B:  INCF   68,F
071C:  BTFSS  03.2
071D:  GOTO   6FE
071E:  INCF   69,F
071F:  GOTO   6FE
0720:  BSF    7A.0
0721:  DECFSZ 6A,F
0722:  GOTO   724
0723:  GOTO   72F
0724:  BCF    03.0
0725:  RLF    66,F
0726:  RLF    67,F
0727:  RLF    68,F
0728:  RLF    69,F
0729:  BCF    03.0
072A:  RLF    7A,F
072B:  RLF    79,F
072C:  RLF    78,F
072D:  RLF    6B,F
072E:  GOTO   6DB
072F:  BTFSS  6B.0
0730:  GOTO   737
0731:  BCF    03.0
0732:  RRF    78,F
0733:  RRF    79,F
0734:  RRF    7A,F
0735:  RRF    6B,F
0736:  GOTO   73A
0737:  DECF   77,F
0738:  BTFSC  03.2
0739:  GOTO   77C
073A:  BTFSC  6B.7
073B:  GOTO   763
073C:  BCF    03.0
073D:  RLF    66,F
073E:  RLF    67,F
073F:  RLF    68,F
0740:  RLF    69,F
0741:  MOVF   65,W
0742:  SUBWF  66,F
0743:  BTFSC  03.0
0744:  GOTO   74F
0745:  MOVLW  01
0746:  SUBWF  67,F
0747:  BTFSC  03.0
0748:  GOTO   74F
0749:  SUBWF  68,F
074A:  BTFSC  03.0
074B:  GOTO   74F
074C:  SUBWF  69,F
074D:  BTFSS  03.0
074E:  GOTO   772
074F:  MOVF   64,W
0750:  SUBWF  67,F
0751:  BTFSC  03.0
0752:  GOTO   75A
0753:  MOVLW  01
0754:  SUBWF  68,F
0755:  BTFSC  03.0
0756:  GOTO   75A
0757:  SUBWF  69,F
0758:  BTFSS  03.0
0759:  GOTO   772
075A:  MOVF   63,W
075B:  IORLW  80
075C:  SUBWF  68,F
075D:  BTFSC  03.0
075E:  GOTO   763
075F:  MOVLW  01
0760:  SUBWF  69,F
0761:  BTFSS  03.0
0762:  GOTO   772
0763:  INCF   7A,F
0764:  BTFSS  03.2
0765:  GOTO   772
0766:  INCF   79,F
0767:  BTFSS  03.2
0768:  GOTO   772
0769:  INCF   78,F
076A:  BTFSS  03.2
076B:  GOTO   772
076C:  INCF   77,F
076D:  BTFSC  03.2
076E:  GOTO   77C
076F:  RRF    78,F
0770:  RRF    79,F
0771:  RRF    7A,F
0772:  MOVF   5F,W
0773:  MOVWF  6A
0774:  MOVF   63,W
0775:  XORWF  6A,F
0776:  BTFSS  6A.7
0777:  GOTO   77A
0778:  BSF    78.7
0779:  GOTO   780
077A:  BCF    78.7
077B:  GOTO   780
077C:  CLRF   77
077D:  CLRF   78
077E:  CLRF   79
077F:  CLRF   7A
0780:  RETURN
0781:  MOVLW  8E
0782:  MOVWF  77
0783:  MOVF   65,W
0784:  SUBWF  77,F
0785:  MOVF   66,W
0786:  MOVWF  79
0787:  MOVF   67,W
0788:  MOVWF  78
0789:  BSF    79.7
078A:  MOVF   77,F
078B:  BTFSC  03.2
078C:  GOTO   798
078D:  BCF    03.0
078E:  MOVF   79,F
078F:  BTFSS  03.2
0790:  GOTO   794
0791:  MOVF   78,F
0792:  BTFSC  03.2
0793:  GOTO   798
0794:  RRF    79,F
0795:  RRF    78,F
0796:  DECFSZ 77,F
0797:  GOTO   78D
0798:  BTFSS  66.7
0799:  GOTO   79F
079A:  COMF   78,F
079B:  COMF   79,F
079C:  INCF   78,F
079D:  BTFSC  03.2
079E:  INCF   79,F
079F:  RETURN
07A0:  MOVLW  8E
07A1:  MOVWF  77
07A2:  MOVF   5C,W
07A3:  MOVWF  78
07A4:  MOVF   5B,W
07A5:  MOVWF  79
07A6:  CLRF   7A
07A7:  BTFSS  5C.7
07A8:  GOTO   7AE
07A9:  COMF   78,F
07AA:  COMF   79,F
07AB:  INCF   79,F
07AC:  BTFSC  03.2
07AD:  INCF   78,F
07AE:  MOVF   78,F
07AF:  BTFSS  03.2
07B0:  GOTO   7BB
07B1:  MOVF   79,W
07B2:  MOVWF  78
07B3:  CLRF   79
07B4:  MOVLW  08
07B5:  SUBWF  77,F
07B6:  MOVF   78,F
07B7:  BTFSS  03.2
07B8:  GOTO   7BB
07B9:  CLRF   77
07BA:  GOTO   7C4
07BB:  BCF    03.0
07BC:  BTFSC  78.7
07BD:  GOTO   7C2
07BE:  RLF    79,F
07BF:  RLF    78,F
07C0:  DECF   77,F
07C1:  GOTO   7BB
07C2:  BTFSS  5C.7
07C3:  BCF    78.7
07C4:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #FUSES HS
.................... #FUSES NOWDT
.................... #FUSES NOBROWNOUT
.................... #FUSES NOLVP
.................... 
.................... #use delay(crystal=20000000)
*
02C8:  MOVLW  53
02C9:  MOVWF  04
02CA:  BCF    03.7
02CB:  MOVF   00,W
02CC:  BTFSC  03.2
02CD:  GOTO   2DB
02CE:  MOVLW  06
02CF:  MOVWF  78
02D0:  CLRF   77
02D1:  DECFSZ 77,F
02D2:  GOTO   2D1
02D3:  DECFSZ 78,F
02D4:  GOTO   2D0
02D5:  MOVLW  7B
02D6:  MOVWF  77
02D7:  DECFSZ 77,F
02D8:  GOTO   2D7
02D9:  DECFSZ 00,F
02DA:  GOTO   2CE
.................... 
.................... 
.................... #include <keypad5x5.h>
.................... #define keypad5x5_h 
.................... 
.................... #define HANG_A input(PIN_B0)
.................... #define HANG_B input(PIN_B1) 
.................... #define HANG_C input(PIN_B2) 
.................... #define HANG_D input(PIN_B3) 
.................... #define HANG_E input(PIN_B4) 
.................... 
.................... #define COT_1 PIN_C0
.................... #define COT_2 PIN_C1
.................... #define COT_3 PIN_C2
.................... #define COT_4 PIN_C3
.................... #define COT_5 PIN_C4
.................... 
.................... void _KhoiTaoBanPhim (void) ;
.................... int1 _CoPhimNhaHayChua (void) ;
.................... void _QuetCot(char TenCot) ;
.................... char _QuetPhimNhan (void) ;
.................... 
.................... void _KhoiTaoBanPhim (void) {
....................    output_bit(COT_1,1) ;
*
0168:  BSF    07.0
0169:  BCF    20.0
016A:  MOVF   20,W
016B:  BSF    03.5
016C:  MOVWF  07
....................    output_bit(COT_2,1) ;
016D:  BCF    03.5
016E:  BSF    07.1
016F:  BCF    20.1
0170:  MOVF   20,W
0171:  BSF    03.5
0172:  MOVWF  07
....................    output_bit(COT_3,1) ;
0173:  BCF    03.5
0174:  BSF    07.2
0175:  BCF    20.2
0176:  MOVF   20,W
0177:  BSF    03.5
0178:  MOVWF  07
....................    output_bit(COT_4,1) ;
0179:  BCF    03.5
017A:  BSF    07.3
017B:  BCF    20.3
017C:  MOVF   20,W
017D:  BSF    03.5
017E:  MOVWF  07
....................    output_bit(COT_5,1) ;
017F:  BCF    03.5
0180:  BSF    07.4
0181:  BCF    20.4
0182:  MOVF   20,W
0183:  BSF    03.5
0184:  MOVWF  07
0185:  BCF    03.5
0186:  BCF    0A.3
0187:  BSF    0A.4
0188:  GOTO   024 (RETURN)
.................... }
.................... 
.................... int1 _CoPhimNhaHayChua (void) {
....................    output_bit(COT_1,0) ;
*
01F7:  BCF    07.0
01F8:  BCF    20.0
01F9:  MOVF   20,W
01FA:  BSF    03.5
01FB:  MOVWF  07
....................    output_bit(COT_2,0) ;
01FC:  BCF    03.5
01FD:  BCF    07.1
01FE:  BCF    20.1
01FF:  MOVF   20,W
0200:  BSF    03.5
0201:  MOVWF  07
....................    output_bit(COT_3,0) ;
0202:  BCF    03.5
0203:  BCF    07.2
0204:  BCF    20.2
0205:  MOVF   20,W
0206:  BSF    03.5
0207:  MOVWF  07
....................    output_bit(COT_4,0) ;
0208:  BCF    03.5
0209:  BCF    07.3
020A:  BCF    20.3
020B:  MOVF   20,W
020C:  BSF    03.5
020D:  MOVWF  07
....................    output_bit(COT_5,0) ;
020E:  BCF    03.5
020F:  BCF    07.4
0210:  BCF    20.4
0211:  MOVF   20,W
0212:  BSF    03.5
0213:  MOVWF  07
....................    
....................    if(HANG_A == 0) return 1 ;
0214:  BSF    06.0
0215:  BCF    03.5
0216:  BTFSC  06.0
0217:  GOTO   21B
0218:  MOVLW  01
0219:  MOVWF  78
021A:  GOTO   23D
....................    if(HANG_B == 0) return 1 ;
021B:  BSF    03.5
021C:  BSF    06.1
021D:  BCF    03.5
021E:  BTFSC  06.1
021F:  GOTO   223
0220:  MOVLW  01
0221:  MOVWF  78
0222:  GOTO   23D
....................    if(HANG_C == 0) return 1 ;
0223:  BSF    03.5
0224:  BSF    06.2
0225:  BCF    03.5
0226:  BTFSC  06.2
0227:  GOTO   22B
0228:  MOVLW  01
0229:  MOVWF  78
022A:  GOTO   23D
....................    if(HANG_D == 0) return 1 ;
022B:  BSF    03.5
022C:  BSF    06.3
022D:  BCF    03.5
022E:  BTFSC  06.3
022F:  GOTO   233
0230:  MOVLW  01
0231:  MOVWF  78
0232:  GOTO   23D
....................    if(HANG_E == 0) return 1 ;
0233:  BSF    03.5
0234:  BSF    06.4
0235:  BCF    03.5
0236:  BTFSC  06.4
0237:  GOTO   23B
0238:  MOVLW  01
0239:  MOVWF  78
023A:  GOTO   23D
....................    
....................    return 0;
023B:  MOVLW  00
023C:  MOVWF  78
023D:  RETURN
....................    
.................... }
.................... 
.................... void _QuetCot (char TenCot) {
....................    output_bit(COT_1,1) ;
023E:  BSF    07.0
023F:  BCF    20.0
0240:  MOVF   20,W
0241:  BSF    03.5
0242:  MOVWF  07
....................    output_bit(COT_2,1) ;
0243:  BCF    03.5
0244:  BSF    07.1
0245:  BCF    20.1
0246:  MOVF   20,W
0247:  BSF    03.5
0248:  MOVWF  07
....................    output_bit(COT_3,1) ;
0249:  BCF    03.5
024A:  BSF    07.2
024B:  BCF    20.2
024C:  MOVF   20,W
024D:  BSF    03.5
024E:  MOVWF  07
....................    output_bit(COT_4,1) ;
024F:  BCF    03.5
0250:  BSF    07.3
0251:  BCF    20.3
0252:  MOVF   20,W
0253:  BSF    03.5
0254:  MOVWF  07
....................    output_bit(COT_5,1) ;
0255:  BCF    03.5
0256:  BSF    07.4
0257:  BCF    20.4
0258:  MOVF   20,W
0259:  BSF    03.5
025A:  MOVWF  07
....................    
....................    switch(TenCot) {
025B:  MOVLW  01
025C:  BCF    03.5
025D:  SUBWF  54,W
025E:  ADDLW  FB
025F:  BTFSC  03.0
0260:  GOTO   285
0261:  ADDLW  05
0262:  GOTO   288
....................       case 1 : {
....................          output_bit(COT_1,0) ;
0263:  BCF    07.0
0264:  BCF    20.0
0265:  MOVF   20,W
0266:  BSF    03.5
0267:  MOVWF  07
....................          break ;
0268:  BCF    03.5
0269:  GOTO   285
....................       }
....................       case 2 : {
....................          output_bit(COT_2,0) ;
026A:  BCF    07.1
026B:  BCF    20.1
026C:  MOVF   20,W
026D:  BSF    03.5
026E:  MOVWF  07
....................          break ;
026F:  BCF    03.5
0270:  GOTO   285
....................       }
....................       case 3 : {
....................          output_bit(COT_3,0) ;
0271:  BCF    07.2
0272:  BCF    20.2
0273:  MOVF   20,W
0274:  BSF    03.5
0275:  MOVWF  07
....................          break ;
0276:  BCF    03.5
0277:  GOTO   285
....................       }
....................       case 4 : {
....................          output_bit(COT_4,0) ;
0278:  BCF    07.3
0279:  BCF    20.3
027A:  MOVF   20,W
027B:  BSF    03.5
027C:  MOVWF  07
....................          break ;
027D:  BCF    03.5
027E:  GOTO   285
....................       }
....................       case 5 : {
....................          output_bit(COT_5,0) ;
027F:  BCF    07.4
0280:  BCF    20.4
0281:  MOVF   20,W
0282:  BSF    03.5
0283:  MOVWF  07
....................          break ;
0284:  BCF    03.5
....................       }
....................    }
0285:  BCF    0A.3
0286:  BCF    0A.4
0287:  GOTO   2E8 (RETURN)
.................... }
.................... 
.................... char _QuetPhimNhan(void) {
....................    char TenCot ; 
....................    char MaPhim[5][5] = {
....................       {'S','C','T','O','A'},
....................       {'7','8','9','/','R'},
....................       {'4','5','6','X','^'},
....................       {'1','2','3','-','D'},
....................       {'F','0','=','+','A'}
....................    } ;
*
0291:  MOVLW  53
0292:  MOVWF  3A
0293:  MOVLW  43
0294:  MOVWF  3B
0295:  MOVLW  54
0296:  MOVWF  3C
0297:  MOVLW  4F
0298:  MOVWF  3D
0299:  MOVLW  41
029A:  MOVWF  3E
029B:  MOVLW  37
029C:  MOVWF  3F
029D:  MOVLW  38
029E:  MOVWF  40
029F:  MOVLW  39
02A0:  MOVWF  41
02A1:  MOVLW  2F
02A2:  MOVWF  42
02A3:  MOVLW  52
02A4:  MOVWF  43
02A5:  MOVLW  34
02A6:  MOVWF  44
02A7:  MOVLW  35
02A8:  MOVWF  45
02A9:  MOVLW  36
02AA:  MOVWF  46
02AB:  MOVLW  58
02AC:  MOVWF  47
02AD:  MOVLW  5E
02AE:  MOVWF  48
02AF:  MOVLW  31
02B0:  MOVWF  49
02B1:  MOVLW  32
02B2:  MOVWF  4A
02B3:  MOVLW  33
02B4:  MOVWF  4B
02B5:  MOVLW  2D
02B6:  MOVWF  4C
02B7:  MOVLW  44
02B8:  MOVWF  4D
02B9:  MOVLW  46
02BA:  MOVWF  4E
02BB:  MOVLW  30
02BC:  MOVWF  4F
02BD:  MOVLW  3D
02BE:  MOVWF  50
02BF:  MOVLW  2B
02C0:  MOVWF  51
02C1:  MOVLW  41
02C2:  MOVWF  52
....................    
....................    if(_CoPhimNhaHayChua() == 1) {
02C3:  CALL   1F7
02C4:  DECFSZ 78,W
02C5:  GOTO   327
....................       delay_ms(10) ;
02C6:  MOVLW  0A
02C7:  MOVWF  53
....................       if(_CoPhimNhaHayChua() == 1) {
*
02DB:  CALL   1F7
02DC:  DECFSZ 78,W
02DD:  GOTO   326
....................          for(TenCot=0 ; TenCot <=4;TenCot++) {
02DE:  CLRF   39
02DF:  MOVF   39,W
02E0:  SUBLW  04
02E1:  BTFSS  03.0
02E2:  GOTO   326
....................             _QuetCot(TenCot+1) ;
02E3:  MOVLW  01
02E4:  ADDWF  39,W
02E5:  MOVWF  53
02E6:  MOVWF  54
02E7:  GOTO   23E
....................             if(HANG_A == 0) return MaPhim[0][TenCot] ;
02E8:  BSF    03.5
02E9:  BSF    06.0
02EA:  BCF    03.5
02EB:  BTFSC  06.0
02EC:  GOTO   2F4
02ED:  MOVLW  3A
02EE:  ADDWF  39,W
02EF:  MOVWF  04
02F0:  BCF    03.7
02F1:  MOVF   00,W
02F2:  MOVWF  78
02F3:  GOTO   329
....................             if(HANG_B == 0) return MaPhim[1][TenCot] ;
02F4:  BSF    03.5
02F5:  BSF    06.1
02F6:  BCF    03.5
02F7:  BTFSC  06.1
02F8:  GOTO   300
02F9:  MOVLW  3F
02FA:  ADDWF  39,W
02FB:  MOVWF  04
02FC:  BCF    03.7
02FD:  MOVF   00,W
02FE:  MOVWF  78
02FF:  GOTO   329
....................             if(HANG_C == 0) return MaPhim[2][TenCot] ;
0300:  BSF    03.5
0301:  BSF    06.2
0302:  BCF    03.5
0303:  BTFSC  06.2
0304:  GOTO   30C
0305:  MOVLW  44
0306:  ADDWF  39,W
0307:  MOVWF  04
0308:  BCF    03.7
0309:  MOVF   00,W
030A:  MOVWF  78
030B:  GOTO   329
....................             if(HANG_D == 0) return MaPhim[3][TenCot] ;
030C:  BSF    03.5
030D:  BSF    06.3
030E:  BCF    03.5
030F:  BTFSC  06.3
0310:  GOTO   318
0311:  MOVLW  49
0312:  ADDWF  39,W
0313:  MOVWF  04
0314:  BCF    03.7
0315:  MOVF   00,W
0316:  MOVWF  78
0317:  GOTO   329
....................             if(HANG_E == 0) return MaPhim[4][TenCot] ;
0318:  BSF    03.5
0319:  BSF    06.4
031A:  BCF    03.5
031B:  BTFSC  06.4
031C:  GOTO   324
031D:  MOVLW  4E
031E:  ADDWF  39,W
031F:  MOVWF  04
0320:  BCF    03.7
0321:  MOVF   00,W
0322:  MOVWF  78
0323:  GOTO   329
0324:  INCF   39,F
0325:  GOTO   2DF
....................          }
....................       
....................       }
....................    
....................    }
0326:  GOTO   329
....................    else {
....................       return 'a' ;
0327:  MOVLW  61
0328:  MOVWF  78
....................    }
0329:  RETURN
.................... 
.................... }
.................... 
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
*
0800:  BCF    64.0
....................    y = x;
0801:  MOVF   58,W
0802:  MOVWF  5D
0803:  MOVF   57,W
0804:  MOVWF  5C
0805:  MOVF   56,W
0806:  MOVWF  5B
0807:  MOVF   55,W
0808:  MOVWF  5A
.................... 
....................    if (x < 0)
0809:  MOVF   58,W
080A:  MOVWF  68
080B:  MOVF   57,W
080C:  MOVWF  67
080D:  MOVF   56,W
080E:  MOVWF  66
080F:  MOVF   55,W
0810:  MOVWF  65
0811:  CLRF   6C
0812:  CLRF   6B
0813:  CLRF   6A
0814:  CLRF   69
0815:  BCF    0A.3
0816:  CALL   549
0817:  BSF    0A.3
0818:  BTFSS  03.0
0819:  GOTO   01E
....................    {
....................       s = 1;
081A:  BSF    64.0
....................       y = -y;
081B:  MOVF   5B,W
081C:  XORLW  80
081D:  MOVWF  5B
....................    }
.................... 
....................    if (y <= 32768.0)
081E:  MOVF   5D,W
081F:  MOVWF  68
0820:  MOVF   5C,W
0821:  MOVWF  67
0822:  MOVF   5B,W
0823:  MOVWF  66
0824:  MOVF   5A,W
0825:  MOVWF  65
0826:  CLRF   6C
0827:  CLRF   6B
0828:  CLRF   6A
0829:  MOVLW  8E
082A:  MOVWF  69
082B:  BCF    0A.3
082C:  CALL   549
082D:  BSF    0A.3
082E:  BTFSC  03.0
082F:  GOTO   032
0830:  BTFSS  03.2
0831:  GOTO   04D
....................       res = (float32)(unsigned int16)y;
0832:  MOVF   5D,W
0833:  MOVWF  68
0834:  MOVF   5C,W
0835:  MOVWF  67
0836:  MOVF   5B,W
0837:  MOVWF  66
0838:  MOVF   5A,W
0839:  MOVWF  65
083A:  BCF    0A.3
083B:  CALL   781
083C:  BSF    0A.3
083D:  MOVF   79,W
083E:  MOVWF  6A
083F:  MOVF   78,W
0840:  MOVWF  69
0841:  BCF    0A.3
0842:  CALL   3B3
0843:  BSF    0A.3
0844:  MOVF   7A,W
0845:  MOVWF  61
0846:  MOVF   79,W
0847:  MOVWF  60
0848:  MOVF   78,W
0849:  MOVWF  5F
084A:  MOVF   77,W
084B:  MOVWF  5E
084C:  GOTO   122
.................... 
....................  else if (y < 10000000.0)
084D:  MOVF   5D,W
084E:  MOVWF  68
084F:  MOVF   5C,W
0850:  MOVWF  67
0851:  MOVF   5B,W
0852:  MOVWF  66
0853:  MOVF   5A,W
0854:  MOVWF  65
0855:  MOVLW  80
0856:  MOVWF  6C
0857:  MOVLW  96
0858:  MOVWF  6B
0859:  MOVLW  18
085A:  MOVWF  6A
085B:  MOVLW  96
085C:  MOVWF  69
085D:  BCF    0A.3
085E:  CALL   549
085F:  BSF    0A.3
0860:  BTFSS  03.0
0861:  GOTO   11A
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
0862:  MOVF   5D,W
0863:  MOVWF  68
0864:  MOVF   5C,W
0865:  MOVWF  67
0866:  MOVF   5B,W
0867:  MOVWF  66
0868:  MOVF   5A,W
0869:  MOVWF  65
086A:  CLRF   6C
086B:  CLRF   6B
086C:  CLRF   6A
086D:  MOVLW  70
086E:  MOVWF  69
086F:  BCF    0A.3
0870:  CALL   33E
0871:  BSF    0A.3
0872:  MOVF   7A,W
0873:  MOVWF  68
0874:  MOVF   79,W
0875:  MOVWF  67
0876:  MOVF   78,W
0877:  MOVWF  66
0878:  MOVF   77,W
0879:  MOVWF  65
087A:  BCF    0A.3
087B:  CALL   781
087C:  BSF    0A.3
087D:  MOVF   79,W
087E:  MOVWF  63
087F:  MOVF   78,W
0880:  MOVWF  62
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
0881:  MOVF   5D,W
0882:  MOVWF  68
0883:  MOVF   5C,W
0884:  MOVWF  67
0885:  MOVF   5B,W
0886:  MOVWF  66
0887:  MOVF   5A,W
0888:  MOVWF  65
0889:  CLRF   6C
088A:  CLRF   6B
088B:  CLRF   6A
088C:  MOVLW  70
088D:  MOVWF  69
088E:  BCF    0A.3
088F:  CALL   33E
0890:  BSF    0A.3
0891:  MOVF   7A,W
0892:  MOVWF  68
0893:  MOVF   79,W
0894:  MOVWF  67
0895:  MOVF   78,W
0896:  MOVWF  66
0897:  MOVF   77,W
0898:  MOVWF  65
0899:  MOVF   63,W
089A:  MOVWF  6A
089B:  MOVF   62,W
089C:  MOVWF  69
089D:  BCF    0A.3
089E:  CALL   3B3
089F:  BSF    0A.3
08A0:  BSF    03.1
08A1:  MOVF   68,W
08A2:  MOVWF  6C
08A3:  MOVF   67,W
08A4:  MOVWF  6B
08A5:  MOVF   66,W
08A6:  MOVWF  6A
08A7:  MOVF   65,W
08A8:  MOVWF  69
08A9:  MOVF   7A,W
08AA:  MOVWF  70
08AB:  MOVF   79,W
08AC:  MOVWF  6F
08AD:  MOVF   78,W
08AE:  MOVWF  6E
08AF:  MOVF   77,W
08B0:  MOVWF  6D
08B1:  BCF    0A.3
08B2:  CALL   3D8
08B3:  BSF    0A.3
08B4:  CLRF   68
08B5:  CLRF   67
08B6:  CLRF   66
08B7:  MOVLW  8E
08B8:  MOVWF  65
08B9:  MOVF   7A,W
08BA:  MOVWF  6C
08BB:  MOVF   79,W
08BC:  MOVWF  6B
08BD:  MOVF   78,W
08BE:  MOVWF  6A
08BF:  MOVF   77,W
08C0:  MOVWF  69
08C1:  BCF    0A.3
08C2:  CALL   33E
08C3:  BSF    0A.3
08C4:  MOVF   7A,W
08C5:  MOVWF  5D
08C6:  MOVF   79,W
08C7:  MOVWF  5C
08C8:  MOVF   78,W
08C9:  MOVWF  5B
08CA:  MOVF   77,W
08CB:  MOVWF  5A
....................       res = 32768.0*(float32)l;
08CC:  MOVF   63,W
08CD:  MOVWF  6A
08CE:  MOVF   62,W
08CF:  MOVWF  69
08D0:  BCF    0A.3
08D1:  CALL   3B3
08D2:  BSF    0A.3
08D3:  CLRF   68
08D4:  CLRF   67
08D5:  CLRF   66
08D6:  MOVLW  8E
08D7:  MOVWF  65
08D8:  MOVF   7A,W
08D9:  MOVWF  6C
08DA:  MOVF   79,W
08DB:  MOVWF  6B
08DC:  MOVF   78,W
08DD:  MOVWF  6A
08DE:  MOVF   77,W
08DF:  MOVWF  69
08E0:  BCF    0A.3
08E1:  CALL   33E
08E2:  BSF    0A.3
08E3:  MOVF   7A,W
08E4:  MOVWF  61
08E5:  MOVF   79,W
08E6:  MOVWF  60
08E7:  MOVF   78,W
08E8:  MOVWF  5F
08E9:  MOVF   77,W
08EA:  MOVWF  5E
....................       res += (float32)(unsigned int16)y;
08EB:  MOVF   5D,W
08EC:  MOVWF  68
08ED:  MOVF   5C,W
08EE:  MOVWF  67
08EF:  MOVF   5B,W
08F0:  MOVWF  66
08F1:  MOVF   5A,W
08F2:  MOVWF  65
08F3:  BCF    0A.3
08F4:  CALL   781
08F5:  BSF    0A.3
08F6:  MOVF   79,W
08F7:  MOVWF  6A
08F8:  MOVF   78,W
08F9:  MOVWF  69
08FA:  BCF    0A.3
08FB:  CALL   3B3
08FC:  BSF    0A.3
08FD:  BCF    03.1
08FE:  MOVF   61,W
08FF:  MOVWF  6C
0900:  MOVF   60,W
0901:  MOVWF  6B
0902:  MOVF   5F,W
0903:  MOVWF  6A
0904:  MOVF   5E,W
0905:  MOVWF  69
0906:  MOVF   7A,W
0907:  MOVWF  70
0908:  MOVF   79,W
0909:  MOVWF  6F
090A:  MOVF   78,W
090B:  MOVWF  6E
090C:  MOVF   77,W
090D:  MOVWF  6D
090E:  BCF    0A.3
090F:  CALL   3D8
0910:  BSF    0A.3
0911:  MOVF   7A,W
0912:  MOVWF  61
0913:  MOVF   79,W
0914:  MOVWF  60
0915:  MOVF   78,W
0916:  MOVWF  5F
0917:  MOVF   77,W
0918:  MOVWF  5E
....................    }
0919:  GOTO   122
.................... 
....................  else
....................   res = y;
091A:  MOVF   5D,W
091B:  MOVWF  61
091C:  MOVF   5C,W
091D:  MOVWF  60
091E:  MOVF   5B,W
091F:  MOVWF  5F
0920:  MOVF   5A,W
0921:  MOVWF  5E
.................... 
....................  y = y - (float32)(unsigned int16)y;
0922:  MOVF   5D,W
0923:  MOVWF  68
0924:  MOVF   5C,W
0925:  MOVWF  67
0926:  MOVF   5B,W
0927:  MOVWF  66
0928:  MOVF   5A,W
0929:  MOVWF  65
092A:  BCF    0A.3
092B:  CALL   781
092C:  BSF    0A.3
092D:  MOVF   79,W
092E:  MOVWF  6A
092F:  MOVF   78,W
0930:  MOVWF  69
0931:  BCF    0A.3
0932:  CALL   3B3
0933:  BSF    0A.3
0934:  BSF    03.1
0935:  MOVF   5D,W
0936:  MOVWF  6C
0937:  MOVF   5C,W
0938:  MOVWF  6B
0939:  MOVF   5B,W
093A:  MOVWF  6A
093B:  MOVF   5A,W
093C:  MOVWF  69
093D:  MOVF   7A,W
093E:  MOVWF  70
093F:  MOVF   79,W
0940:  MOVWF  6F
0941:  MOVF   78,W
0942:  MOVWF  6E
0943:  MOVF   77,W
0944:  MOVWF  6D
0945:  BCF    0A.3
0946:  CALL   3D8
0947:  BSF    0A.3
0948:  MOVF   7A,W
0949:  MOVWF  5D
094A:  MOVF   79,W
094B:  MOVWF  5C
094C:  MOVF   78,W
094D:  MOVWF  5B
094E:  MOVF   77,W
094F:  MOVWF  5A
.................... 
....................  if (s)
0950:  BTFSS  64.0
0951:  GOTO   155
....................   res = -res;
0952:  MOVF   5F,W
0953:  XORLW  80
0954:  MOVWF  5F
.................... 
....................  if (y != 0)
0955:  MOVF   5D,W
0956:  MOVWF  68
0957:  MOVF   5C,W
0958:  MOVWF  67
0959:  MOVF   5B,W
095A:  MOVWF  66
095B:  MOVF   5A,W
095C:  MOVWF  65
095D:  CLRF   6C
095E:  CLRF   6B
095F:  CLRF   6A
0960:  CLRF   69
0961:  BCF    0A.3
0962:  CALL   549
0963:  BSF    0A.3
0964:  BTFSC  03.2
0965:  GOTO   1A1
....................  {
....................   if (s == 1 && n == 0)
0966:  BTFSS  64.0
0967:  GOTO   184
0968:  MOVF   59,F
0969:  BTFSS  03.2
096A:  GOTO   184
....................    res -= 1.0;
096B:  BSF    03.1
096C:  MOVF   61,W
096D:  MOVWF  6C
096E:  MOVF   60,W
096F:  MOVWF  6B
0970:  MOVF   5F,W
0971:  MOVWF  6A
0972:  MOVF   5E,W
0973:  MOVWF  69
0974:  CLRF   70
0975:  CLRF   6F
0976:  CLRF   6E
0977:  MOVLW  7F
0978:  MOVWF  6D
0979:  BCF    0A.3
097A:  CALL   3D8
097B:  BSF    0A.3
097C:  MOVF   7A,W
097D:  MOVWF  61
097E:  MOVF   79,W
097F:  MOVWF  60
0980:  MOVF   78,W
0981:  MOVWF  5F
0982:  MOVF   77,W
0983:  MOVWF  5E
.................... 
....................   if (s == 0 && n == 1)
0984:  BTFSC  64.0
0985:  GOTO   1A1
0986:  DECFSZ 59,W
0987:  GOTO   1A1
....................    res += 1.0;
0988:  BCF    03.1
0989:  MOVF   61,W
098A:  MOVWF  6C
098B:  MOVF   60,W
098C:  MOVWF  6B
098D:  MOVF   5F,W
098E:  MOVWF  6A
098F:  MOVF   5E,W
0990:  MOVWF  69
0991:  CLRF   70
0992:  CLRF   6F
0993:  CLRF   6E
0994:  MOVLW  7F
0995:  MOVWF  6D
0996:  BCF    0A.3
0997:  CALL   3D8
0998:  BSF    0A.3
0999:  MOVF   7A,W
099A:  MOVWF  61
099B:  MOVF   79,W
099C:  MOVWF  60
099D:  MOVF   78,W
099E:  MOVWF  5F
099F:  MOVF   77,W
09A0:  MOVWF  5E
....................  }
....................  if (x == 0)
09A1:  MOVF   58,W
09A2:  MOVWF  68
09A3:  MOVF   57,W
09A4:  MOVWF  67
09A5:  MOVF   56,W
09A6:  MOVWF  66
09A7:  MOVF   55,W
09A8:  MOVWF  65
09A9:  CLRF   6C
09AA:  CLRF   6B
09AB:  CLRF   6A
09AC:  CLRF   69
09AD:  BCF    0A.3
09AE:  CALL   549
09AF:  BSF    0A.3
09B0:  BTFSS  03.2
09B1:  GOTO   1B6
....................     res = 0;
09B2:  CLRF   61
09B3:  CLRF   60
09B4:  CLRF   5F
09B5:  CLRF   5E
.................... 
....................  return (res);
09B6:  MOVF   5E,W
09B7:  MOVWF  77
09B8:  MOVF   5F,W
09B9:  MOVWF  78
09BA:  MOVF   60,W
09BB:  MOVWF  79
09BC:  MOVF   61,W
09BD:  MOVWF  7A
09BE:  RETURN
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
*
0A4E:  MOVF   54,W
0A4F:  MOVWF  58
0A50:  MOVF   53,W
0A51:  MOVWF  57
0A52:  MOVF   52,W
0A53:  MOVWF  56
0A54:  MOVF   51,W
0A55:  MOVWF  55
0A56:  CLRF   59
0A57:  CALL   000
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
*
0A1F:  MOVF   54,W
0A20:  MOVWF  58
0A21:  MOVF   53,W
0A22:  MOVWF  57
0A23:  MOVF   52,W
0A24:  MOVWF  56
0A25:  MOVF   51,W
0A26:  MOVWF  55
0A27:  MOVLW  01
0A28:  MOVWF  59
0A29:  CALL   000
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
*
09BF:  MOVF   48,W
09C0:  MOVWF  68
09C1:  MOVF   47,W
09C2:  MOVWF  67
09C3:  MOVF   46,W
09C4:  MOVWF  66
09C5:  MOVF   45,W
09C6:  MOVWF  65
09C7:  CLRF   6C
09C8:  CLRF   6B
09C9:  CLRF   6A
09CA:  CLRF   69
09CB:  BCF    0A.3
09CC:  CALL   549
09CD:  BSF    0A.3
09CE:  BTFSC  03.2
09CF:  GOTO   288
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
09D0:  MOVF   44,W
09D1:  MOVWF  61
09D2:  MOVF   43,W
09D3:  MOVWF  60
09D4:  MOVF   42,W
09D5:  MOVWF  5F
09D6:  MOVF   41,W
09D7:  MOVWF  5E
09D8:  MOVF   48,W
09D9:  MOVWF  65
09DA:  MOVF   47,W
09DB:  MOVWF  64
09DC:  MOVF   46,W
09DD:  MOVWF  63
09DE:  MOVF   45,W
09DF:  MOVWF  62
09E0:  BCF    0A.3
09E1:  CALL   6B7
09E2:  BSF    0A.3
09E3:  MOVF   7A,W
09E4:  MOVWF  50
09E5:  MOVF   79,W
09E6:  MOVWF  4F
09E7:  MOVF   78,W
09E8:  MOVWF  4E
09E9:  MOVF   77,W
09EA:  MOVWF  4D
09EB:  MOVF   50,W
09EC:  MOVWF  68
09ED:  MOVF   4F,W
09EE:  MOVWF  67
09EF:  MOVF   4E,W
09F0:  MOVWF  66
09F1:  MOVF   4D,W
09F2:  MOVWF  65
09F3:  CLRF   6C
09F4:  CLRF   6B
09F5:  CLRF   6A
09F6:  CLRF   69
09F7:  BCF    0A.3
09F8:  CALL   549
09F9:  BSF    0A.3
09FA:  BTFSS  03.0
09FB:  GOTO   22B
09FC:  MOVF   44,W
09FD:  MOVWF  61
09FE:  MOVF   43,W
09FF:  MOVWF  60
0A00:  MOVF   42,W
0A01:  MOVWF  5F
0A02:  MOVF   41,W
0A03:  MOVWF  5E
0A04:  MOVF   48,W
0A05:  MOVWF  65
0A06:  MOVF   47,W
0A07:  MOVWF  64
0A08:  MOVF   46,W
0A09:  MOVWF  63
0A0A:  MOVF   45,W
0A0B:  MOVWF  62
0A0C:  BCF    0A.3
0A0D:  CALL   6B7
0A0E:  BSF    0A.3
0A0F:  MOVF   7A,W
0A10:  MOVWF  50
0A11:  MOVF   79,W
0A12:  MOVWF  4F
0A13:  MOVF   78,W
0A14:  MOVWF  4E
0A15:  MOVF   77,W
0A16:  MOVWF  4D
0A17:  MOVF   50,W
0A18:  MOVWF  54
0A19:  MOVF   4F,W
0A1A:  MOVWF  53
0A1B:  MOVF   4E,W
0A1C:  MOVWF  52
0A1D:  MOVF   4D,W
0A1E:  MOVWF  51
*
0A2A:  GOTO   258
0A2B:  MOVF   44,W
0A2C:  MOVWF  61
0A2D:  MOVF   43,W
0A2E:  MOVWF  60
0A2F:  MOVF   42,W
0A30:  MOVWF  5F
0A31:  MOVF   41,W
0A32:  MOVWF  5E
0A33:  MOVF   48,W
0A34:  MOVWF  65
0A35:  MOVF   47,W
0A36:  MOVWF  64
0A37:  MOVF   46,W
0A38:  MOVWF  63
0A39:  MOVF   45,W
0A3A:  MOVWF  62
0A3B:  BCF    0A.3
0A3C:  CALL   6B7
0A3D:  BSF    0A.3
0A3E:  MOVF   7A,W
0A3F:  MOVWF  50
0A40:  MOVF   79,W
0A41:  MOVWF  4F
0A42:  MOVF   78,W
0A43:  MOVWF  4E
0A44:  MOVF   77,W
0A45:  MOVWF  4D
0A46:  MOVF   50,W
0A47:  MOVWF  54
0A48:  MOVF   4F,W
0A49:  MOVWF  53
0A4A:  MOVF   4E,W
0A4B:  MOVWF  52
0A4C:  MOVF   4D,W
0A4D:  MOVWF  51
*
0A58:  MOVF   7A,W
0A59:  MOVWF  4C
0A5A:  MOVF   79,W
0A5B:  MOVWF  4B
0A5C:  MOVF   78,W
0A5D:  MOVWF  4A
0A5E:  MOVF   77,W
0A5F:  MOVWF  49
....................       return(x-(i*y));
0A60:  MOVF   4C,W
0A61:  MOVWF  68
0A62:  MOVF   4B,W
0A63:  MOVWF  67
0A64:  MOVF   4A,W
0A65:  MOVWF  66
0A66:  MOVF   49,W
0A67:  MOVWF  65
0A68:  MOVF   48,W
0A69:  MOVWF  6C
0A6A:  MOVF   47,W
0A6B:  MOVWF  6B
0A6C:  MOVF   46,W
0A6D:  MOVWF  6A
0A6E:  MOVF   45,W
0A6F:  MOVWF  69
0A70:  BCF    0A.3
0A71:  CALL   33E
0A72:  BSF    0A.3
0A73:  BSF    03.1
0A74:  MOVF   44,W
0A75:  MOVWF  6C
0A76:  MOVF   43,W
0A77:  MOVWF  6B
0A78:  MOVF   42,W
0A79:  MOVWF  6A
0A7A:  MOVF   41,W
0A7B:  MOVWF  69
0A7C:  MOVF   7A,W
0A7D:  MOVWF  70
0A7E:  MOVF   79,W
0A7F:  MOVWF  6F
0A80:  MOVF   78,W
0A81:  MOVWF  6E
0A82:  MOVF   77,W
0A83:  MOVWF  6D
0A84:  BCF    0A.3
0A85:  CALL   3D8
0A86:  BSF    0A.3
0A87:  GOTO   288
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
0A88:  RETURN
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
*
0C4F:  MOVF   48,W
0C50:  MOVWF  68
0C51:  MOVF   47,W
0C52:  MOVWF  67
0C53:  MOVF   46,W
0C54:  MOVWF  66
0C55:  MOVF   45,W
0C56:  MOVWF  65
0C57:  MOVLW  3B
0C58:  MOVWF  6C
0C59:  MOVLW  AA
0C5A:  MOVWF  6B
0C5B:  MOVLW  38
0C5C:  MOVWF  6A
0C5D:  MOVLW  7F
0C5E:  MOVWF  69
0C5F:  BCF    0A.3
0C60:  CALL   33E
0C61:  BSF    0A.3
0C62:  MOVF   7A,W
0C63:  MOVWF  68
0C64:  MOVF   79,W
0C65:  MOVWF  67
0C66:  MOVF   78,W
0C67:  MOVWF  66
0C68:  MOVF   77,W
0C69:  MOVWF  65
0C6A:  BCF    0A.3
0C6B:  CALL   781
0C6C:  BSF    0A.3
0C6D:  MOVF   78,W
0C6E:  MOVWF  55
....................    s = 0;
0C6F:  BCF    56.0
....................    y = x;
0C70:  MOVF   48,W
0C71:  MOVWF  4C
0C72:  MOVF   47,W
0C73:  MOVWF  4B
0C74:  MOVF   46,W
0C75:  MOVWF  4A
0C76:  MOVF   45,W
0C77:  MOVWF  49
.................... 
....................    if (x < 0)
0C78:  MOVF   48,W
0C79:  MOVWF  68
0C7A:  MOVF   47,W
0C7B:  MOVWF  67
0C7C:  MOVF   46,W
0C7D:  MOVWF  66
0C7E:  MOVF   45,W
0C7F:  MOVWF  65
0C80:  CLRF   6C
0C81:  CLRF   6B
0C82:  CLRF   6A
0C83:  CLRF   69
0C84:  BCF    0A.3
0C85:  CALL   549
0C86:  BSF    0A.3
0C87:  BTFSS  03.0
0C88:  GOTO   48F
....................    {
....................       s = 1;
0C89:  BSF    56.0
....................       n = -n;
0C8A:  COMF   55,F
0C8B:  INCF   55,F
....................       y = -y;
0C8C:  MOVF   4A,W
0C8D:  XORLW  80
0C8E:  MOVWF  4A
....................    }
.................... 
....................    res = 0.0;
0C8F:  CLRF   50
0C90:  CLRF   4F
0C91:  CLRF   4E
0C92:  CLRF   4D
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
0C93:  CLRF   58
0C94:  MOVLW  4D
0C95:  MOVWF  57
0C96:  MOVF   57,W
0C97:  MOVWF  04
0C98:  BCF    03.7
0C99:  BTFSC  58.0
0C9A:  BSF    03.7
0C9B:  MOVLW  7F
0C9C:  ADDWF  55,W
0C9D:  MOVWF  00
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
0C9E:  MOVF   4C,W
0C9F:  MOVWF  68
0CA0:  MOVF   4B,W
0CA1:  MOVWF  67
0CA2:  MOVF   4A,W
0CA3:  MOVWF  66
0CA4:  MOVF   49,W
0CA5:  MOVWF  65
0CA6:  MOVLW  3B
0CA7:  MOVWF  6C
0CA8:  MOVLW  AA
0CA9:  MOVWF  6B
0CAA:  MOVLW  38
0CAB:  MOVWF  6A
0CAC:  MOVLW  7F
0CAD:  MOVWF  69
0CAE:  BCF    0A.3
0CAF:  CALL   33E
0CB0:  BSF    0A.3
0CB1:  MOVF   7A,W
0CB2:  MOVWF  5A
0CB3:  MOVF   79,W
0CB4:  MOVWF  59
0CB5:  MOVF   78,W
0CB6:  MOVWF  58
0CB7:  MOVF   77,W
0CB8:  MOVWF  57
0CB9:  CLRF   5C
0CBA:  MOVF   55,W
0CBB:  MOVWF  5B
0CBC:  BTFSC  5B.7
0CBD:  DECF   5C,F
0CBE:  BCF    0A.3
0CBF:  CALL   7A0
0CC0:  BSF    0A.3
0CC1:  BSF    03.1
0CC2:  MOVF   5A,W
0CC3:  MOVWF  6C
0CC4:  MOVF   59,W
0CC5:  MOVWF  6B
0CC6:  MOVF   58,W
0CC7:  MOVWF  6A
0CC8:  MOVF   57,W
0CC9:  MOVWF  69
0CCA:  MOVF   7A,W
0CCB:  MOVWF  70
0CCC:  MOVF   79,W
0CCD:  MOVWF  6F
0CCE:  MOVF   78,W
0CCF:  MOVWF  6E
0CD0:  MOVF   77,W
0CD1:  MOVWF  6D
0CD2:  BCF    0A.3
0CD3:  CALL   3D8
0CD4:  BSF    0A.3
0CD5:  MOVF   7A,W
0CD6:  MOVWF  4C
0CD7:  MOVF   79,W
0CD8:  MOVWF  4B
0CD9:  MOVF   78,W
0CDA:  MOVWF  4A
0CDB:  MOVF   77,W
0CDC:  MOVWF  49
.................... 
....................    r = pe[0]*y + pe[1];
0CDD:  MOVLW  7C
0CDE:  MOVWF  68
0CDF:  MOVLW  88
0CE0:  MOVWF  67
0CE1:  MOVLW  59
0CE2:  MOVWF  66
0CE3:  MOVLW  72
0CE4:  MOVWF  65
0CE5:  MOVF   4C,W
0CE6:  MOVWF  6C
0CE7:  MOVF   4B,W
0CE8:  MOVWF  6B
0CE9:  MOVF   4A,W
0CEA:  MOVWF  6A
0CEB:  MOVF   49,W
0CEC:  MOVWF  69
0CED:  BCF    0A.3
0CEE:  CALL   33E
0CEF:  BSF    0A.3
0CF0:  MOVF   7A,W
0CF1:  MOVWF  5A
0CF2:  MOVF   79,W
0CF3:  MOVWF  59
0CF4:  MOVF   78,W
0CF5:  MOVWF  58
0CF6:  MOVF   77,W
0CF7:  MOVWF  57
0CF8:  BCF    03.1
0CF9:  MOVF   7A,W
0CFA:  MOVWF  6C
0CFB:  MOVF   79,W
0CFC:  MOVWF  6B
0CFD:  MOVF   78,W
0CFE:  MOVWF  6A
0CFF:  MOVF   77,W
0D00:  MOVWF  69
0D01:  MOVLW  E0
0D02:  MOVWF  70
0D03:  MOVLW  97
0D04:  MOVWF  6F
0D05:  MOVLW  26
0D06:  MOVWF  6E
0D07:  MOVLW  75
0D08:  MOVWF  6D
0D09:  BCF    0A.3
0D0A:  CALL   3D8
0D0B:  BSF    0A.3
0D0C:  MOVF   7A,W
0D0D:  MOVWF  54
0D0E:  MOVF   79,W
0D0F:  MOVWF  53
0D10:  MOVF   78,W
0D11:  MOVWF  52
0D12:  MOVF   77,W
0D13:  MOVWF  51
....................    r = r*y + pe[2];
0D14:  MOVF   54,W
0D15:  MOVWF  68
0D16:  MOVF   53,W
0D17:  MOVWF  67
0D18:  MOVF   52,W
0D19:  MOVWF  66
0D1A:  MOVF   51,W
0D1B:  MOVWF  65
0D1C:  MOVF   4C,W
0D1D:  MOVWF  6C
0D1E:  MOVF   4B,W
0D1F:  MOVWF  6B
0D20:  MOVF   4A,W
0D21:  MOVWF  6A
0D22:  MOVF   49,W
0D23:  MOVWF  69
0D24:  BCF    0A.3
0D25:  CALL   33E
0D26:  BSF    0A.3
0D27:  MOVF   7A,W
0D28:  MOVWF  5A
0D29:  MOVF   79,W
0D2A:  MOVWF  59
0D2B:  MOVF   78,W
0D2C:  MOVWF  58
0D2D:  MOVF   77,W
0D2E:  MOVWF  57
0D2F:  BCF    03.1
0D30:  MOVF   7A,W
0D31:  MOVWF  6C
0D32:  MOVF   79,W
0D33:  MOVWF  6B
0D34:  MOVF   78,W
0D35:  MOVWF  6A
0D36:  MOVF   77,W
0D37:  MOVWF  69
0D38:  MOVLW  C4
0D39:  MOVWF  70
0D3A:  MOVLW  1D
0D3B:  MOVWF  6F
0D3C:  MOVLW  1E
0D3D:  MOVWF  6E
0D3E:  MOVLW  78
0D3F:  MOVWF  6D
0D40:  BCF    0A.3
0D41:  CALL   3D8
0D42:  BSF    0A.3
0D43:  MOVF   7A,W
0D44:  MOVWF  54
0D45:  MOVF   79,W
0D46:  MOVWF  53
0D47:  MOVF   78,W
0D48:  MOVWF  52
0D49:  MOVF   77,W
0D4A:  MOVWF  51
....................    r = r*y + pe[3];
0D4B:  MOVF   54,W
0D4C:  MOVWF  68
0D4D:  MOVF   53,W
0D4E:  MOVWF  67
0D4F:  MOVF   52,W
0D50:  MOVWF  66
0D51:  MOVF   51,W
0D52:  MOVWF  65
0D53:  MOVF   4C,W
0D54:  MOVWF  6C
0D55:  MOVF   4B,W
0D56:  MOVWF  6B
0D57:  MOVF   4A,W
0D58:  MOVWF  6A
0D59:  MOVF   49,W
0D5A:  MOVWF  69
0D5B:  BCF    0A.3
0D5C:  CALL   33E
0D5D:  BSF    0A.3
0D5E:  MOVF   7A,W
0D5F:  MOVWF  5A
0D60:  MOVF   79,W
0D61:  MOVWF  59
0D62:  MOVF   78,W
0D63:  MOVWF  58
0D64:  MOVF   77,W
0D65:  MOVWF  57
0D66:  BCF    03.1
0D67:  MOVF   7A,W
0D68:  MOVWF  6C
0D69:  MOVF   79,W
0D6A:  MOVWF  6B
0D6B:  MOVF   78,W
0D6C:  MOVWF  6A
0D6D:  MOVF   77,W
0D6E:  MOVWF  69
0D6F:  MOVLW  5E
0D70:  MOVWF  70
0D71:  MOVLW  50
0D72:  MOVWF  6F
0D73:  MOVLW  63
0D74:  MOVWF  6E
0D75:  MOVLW  7A
0D76:  MOVWF  6D
0D77:  BCF    0A.3
0D78:  CALL   3D8
0D79:  BSF    0A.3
0D7A:  MOVF   7A,W
0D7B:  MOVWF  54
0D7C:  MOVF   79,W
0D7D:  MOVWF  53
0D7E:  MOVF   78,W
0D7F:  MOVWF  52
0D80:  MOVF   77,W
0D81:  MOVWF  51
....................    r = r*y + pe[4];
0D82:  MOVF   54,W
0D83:  MOVWF  68
0D84:  MOVF   53,W
0D85:  MOVWF  67
0D86:  MOVF   52,W
0D87:  MOVWF  66
0D88:  MOVF   51,W
0D89:  MOVWF  65
0D8A:  MOVF   4C,W
0D8B:  MOVWF  6C
0D8C:  MOVF   4B,W
0D8D:  MOVWF  6B
0D8E:  MOVF   4A,W
0D8F:  MOVWF  6A
0D90:  MOVF   49,W
0D91:  MOVWF  69
0D92:  BCF    0A.3
0D93:  CALL   33E
0D94:  BSF    0A.3
0D95:  MOVF   7A,W
0D96:  MOVWF  5A
0D97:  MOVF   79,W
0D98:  MOVWF  59
0D99:  MOVF   78,W
0D9A:  MOVWF  58
0D9B:  MOVF   77,W
0D9C:  MOVWF  57
0D9D:  BCF    03.1
0D9E:  MOVF   7A,W
0D9F:  MOVWF  6C
0DA0:  MOVF   79,W
0DA1:  MOVWF  6B
0DA2:  MOVF   78,W
0DA3:  MOVWF  6A
0DA4:  MOVF   77,W
0DA5:  MOVWF  69
0DA6:  MOVLW  1A
0DA7:  MOVWF  70
0DA8:  MOVLW  FE
0DA9:  MOVWF  6F
0DAA:  MOVLW  75
0DAB:  MOVWF  6E
0DAC:  MOVLW  7C
0DAD:  MOVWF  6D
0DAE:  BCF    0A.3
0DAF:  CALL   3D8
0DB0:  BSF    0A.3
0DB1:  MOVF   7A,W
0DB2:  MOVWF  54
0DB3:  MOVF   79,W
0DB4:  MOVWF  53
0DB5:  MOVF   78,W
0DB6:  MOVWF  52
0DB7:  MOVF   77,W
0DB8:  MOVWF  51
....................    r = r*y + pe[5];
0DB9:  MOVF   54,W
0DBA:  MOVWF  68
0DBB:  MOVF   53,W
0DBC:  MOVWF  67
0DBD:  MOVF   52,W
0DBE:  MOVWF  66
0DBF:  MOVF   51,W
0DC0:  MOVWF  65
0DC1:  MOVF   4C,W
0DC2:  MOVWF  6C
0DC3:  MOVF   4B,W
0DC4:  MOVWF  6B
0DC5:  MOVF   4A,W
0DC6:  MOVWF  6A
0DC7:  MOVF   49,W
0DC8:  MOVWF  69
0DC9:  BCF    0A.3
0DCA:  CALL   33E
0DCB:  BSF    0A.3
0DCC:  MOVF   7A,W
0DCD:  MOVWF  5A
0DCE:  MOVF   79,W
0DCF:  MOVWF  59
0DD0:  MOVF   78,W
0DD1:  MOVWF  58
0DD2:  MOVF   77,W
0DD3:  MOVWF  57
0DD4:  BCF    03.1
0DD5:  MOVF   7A,W
0DD6:  MOVWF  6C
0DD7:  MOVF   79,W
0DD8:  MOVWF  6B
0DD9:  MOVF   78,W
0DDA:  MOVWF  6A
0DDB:  MOVF   77,W
0DDC:  MOVWF  69
0DDD:  MOVLW  18
0DDE:  MOVWF  70
0DDF:  MOVLW  72
0DE0:  MOVWF  6F
0DE1:  MOVLW  31
0DE2:  MOVWF  6E
0DE3:  MOVLW  7E
0DE4:  MOVWF  6D
0DE5:  BCF    0A.3
0DE6:  CALL   3D8
0DE7:  BSF    0A.3
0DE8:  MOVF   7A,W
0DE9:  MOVWF  54
0DEA:  MOVF   79,W
0DEB:  MOVWF  53
0DEC:  MOVF   78,W
0DED:  MOVWF  52
0DEE:  MOVF   77,W
0DEF:  MOVWF  51
.................... 
....................    res = res*(1.0 + y*r);
0DF0:  MOVF   4C,W
0DF1:  MOVWF  68
0DF2:  MOVF   4B,W
0DF3:  MOVWF  67
0DF4:  MOVF   4A,W
0DF5:  MOVWF  66
0DF6:  MOVF   49,W
0DF7:  MOVWF  65
0DF8:  MOVF   54,W
0DF9:  MOVWF  6C
0DFA:  MOVF   53,W
0DFB:  MOVWF  6B
0DFC:  MOVF   52,W
0DFD:  MOVWF  6A
0DFE:  MOVF   51,W
0DFF:  MOVWF  69
0E00:  BCF    0A.3
0E01:  CALL   33E
0E02:  BSF    0A.3
0E03:  BCF    03.1
0E04:  CLRF   6C
0E05:  CLRF   6B
0E06:  CLRF   6A
0E07:  MOVLW  7F
0E08:  MOVWF  69
0E09:  MOVF   7A,W
0E0A:  MOVWF  70
0E0B:  MOVF   79,W
0E0C:  MOVWF  6F
0E0D:  MOVF   78,W
0E0E:  MOVWF  6E
0E0F:  MOVF   77,W
0E10:  MOVWF  6D
0E11:  BCF    0A.3
0E12:  CALL   3D8
0E13:  BSF    0A.3
0E14:  MOVF   50,W
0E15:  MOVWF  68
0E16:  MOVF   4F,W
0E17:  MOVWF  67
0E18:  MOVF   4E,W
0E19:  MOVWF  66
0E1A:  MOVF   4D,W
0E1B:  MOVWF  65
0E1C:  MOVF   7A,W
0E1D:  MOVWF  6C
0E1E:  MOVF   79,W
0E1F:  MOVWF  6B
0E20:  MOVF   78,W
0E21:  MOVWF  6A
0E22:  MOVF   77,W
0E23:  MOVWF  69
0E24:  BCF    0A.3
0E25:  CALL   33E
0E26:  BSF    0A.3
0E27:  MOVF   7A,W
0E28:  MOVWF  50
0E29:  MOVF   79,W
0E2A:  MOVWF  4F
0E2B:  MOVF   78,W
0E2C:  MOVWF  4E
0E2D:  MOVF   77,W
0E2E:  MOVWF  4D
.................... 
....................    if (s)
0E2F:  BTFSS  56.0
0E30:  GOTO   649
....................       res = 1.0/res;
0E31:  CLRF   61
0E32:  CLRF   60
0E33:  CLRF   5F
0E34:  MOVLW  7F
0E35:  MOVWF  5E
0E36:  MOVF   50,W
0E37:  MOVWF  65
0E38:  MOVF   4F,W
0E39:  MOVWF  64
0E3A:  MOVF   4E,W
0E3B:  MOVWF  63
0E3C:  MOVF   4D,W
0E3D:  MOVWF  62
0E3E:  BCF    0A.3
0E3F:  CALL   6B7
0E40:  BSF    0A.3
0E41:  MOVF   7A,W
0E42:  MOVWF  50
0E43:  MOVF   79,W
0E44:  MOVWF  4F
0E45:  MOVF   78,W
0E46:  MOVWF  4E
0E47:  MOVF   77,W
0E48:  MOVWF  4D
....................    return(res);
0E49:  MOVF   4D,W
0E4A:  MOVWF  77
0E4B:  MOVF   4E,W
0E4C:  MOVWF  78
0E4D:  MOVF   4F,W
0E4E:  MOVWF  79
0E4F:  MOVF   50,W
0E50:  MOVWF  7A
0E51:  RETURN
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
*
0A89:  MOVF   48,W
0A8A:  MOVWF  4C
0A8B:  MOVF   47,W
0A8C:  MOVWF  4B
0A8D:  MOVF   46,W
0A8E:  MOVWF  4A
0A8F:  MOVF   45,W
0A90:  MOVWF  49
.................... 
....................    if (y != 1.0)
0A91:  MOVF   4C,W
0A92:  MOVWF  68
0A93:  MOVF   4B,W
0A94:  MOVWF  67
0A95:  MOVF   4A,W
0A96:  MOVWF  66
0A97:  MOVF   49,W
0A98:  MOVWF  65
0A99:  CLRF   6C
0A9A:  CLRF   6B
0A9B:  CLRF   6A
0A9C:  MOVLW  7F
0A9D:  MOVWF  69
0A9E:  BCF    0A.3
0A9F:  CALL   549
0AA0:  BSF    0A.3
0AA1:  BTFSC  03.2
0AA2:  GOTO   442
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
0AA3:  CLRF   5B
0AA4:  MOVLW  49
0AA5:  MOVWF  5A
0AA6:  MOVF   5A,W
0AA7:  MOVWF  04
0AA8:  BCF    03.7
0AA9:  BTFSC  5B.0
0AAA:  BSF    03.7
0AAB:  MOVLW  7E
0AAC:  MOVWF  00
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
0AAD:  BSF    03.1
0AAE:  MOVF   4C,W
0AAF:  MOVWF  6C
0AB0:  MOVF   4B,W
0AB1:  MOVWF  6B
0AB2:  MOVF   4A,W
0AB3:  MOVWF  6A
0AB4:  MOVF   49,W
0AB5:  MOVWF  69
0AB6:  CLRF   70
0AB7:  CLRF   6F
0AB8:  CLRF   6E
0AB9:  MOVLW  7F
0ABA:  MOVWF  6D
0ABB:  BCF    0A.3
0ABC:  CALL   3D8
0ABD:  BSF    0A.3
0ABE:  MOVF   7A,W
0ABF:  MOVWF  5D
0AC0:  MOVF   79,W
0AC1:  MOVWF  5C
0AC2:  MOVF   78,W
0AC3:  MOVWF  5B
0AC4:  MOVF   77,W
0AC5:  MOVWF  5A
0AC6:  BCF    03.1
0AC7:  MOVF   4C,W
0AC8:  MOVWF  6C
0AC9:  MOVF   4B,W
0ACA:  MOVWF  6B
0ACB:  MOVF   4A,W
0ACC:  MOVWF  6A
0ACD:  MOVF   49,W
0ACE:  MOVWF  69
0ACF:  CLRF   70
0AD0:  CLRF   6F
0AD1:  CLRF   6E
0AD2:  MOVLW  7F
0AD3:  MOVWF  6D
0AD4:  BCF    0A.3
0AD5:  CALL   3D8
0AD6:  BSF    0A.3
0AD7:  MOVF   5D,W
0AD8:  MOVWF  61
0AD9:  MOVF   5C,W
0ADA:  MOVWF  60
0ADB:  MOVF   5B,W
0ADC:  MOVWF  5F
0ADD:  MOVF   5A,W
0ADE:  MOVWF  5E
0ADF:  MOVF   7A,W
0AE0:  MOVWF  65
0AE1:  MOVF   79,W
0AE2:  MOVWF  64
0AE3:  MOVF   78,W
0AE4:  MOVWF  63
0AE5:  MOVF   77,W
0AE6:  MOVWF  62
0AE7:  BCF    0A.3
0AE8:  CALL   6B7
0AE9:  BSF    0A.3
0AEA:  MOVF   7A,W
0AEB:  MOVWF  4C
0AEC:  MOVF   79,W
0AED:  MOVWF  4B
0AEE:  MOVF   78,W
0AEF:  MOVWF  4A
0AF0:  MOVF   77,W
0AF1:  MOVWF  49
.................... 
....................       y2=y*y;
0AF2:  MOVF   4C,W
0AF3:  MOVWF  68
0AF4:  MOVF   4B,W
0AF5:  MOVWF  67
0AF6:  MOVF   4A,W
0AF7:  MOVWF  66
0AF8:  MOVF   49,W
0AF9:  MOVWF  65
0AFA:  MOVF   4C,W
0AFB:  MOVWF  6C
0AFC:  MOVF   4B,W
0AFD:  MOVWF  6B
0AFE:  MOVF   4A,W
0AFF:  MOVWF  6A
0B00:  MOVF   49,W
0B01:  MOVWF  69
0B02:  BCF    0A.3
0B03:  CALL   33E
0B04:  BSF    0A.3
0B05:  MOVF   7A,W
0B06:  MOVWF  58
0B07:  MOVF   79,W
0B08:  MOVWF  57
0B09:  MOVF   78,W
0B0A:  MOVWF  56
0B0B:  MOVF   77,W
0B0C:  MOVWF  55
.................... 
....................       res = pl[0]*y2 + pl[1];
0B0D:  MOVLW  99
0B0E:  MOVWF  68
0B0F:  MOVLW  47
0B10:  MOVWF  67
0B11:  MOVLW  8A
0B12:  MOVWF  66
0B13:  MOVLW  7F
0B14:  MOVWF  65
0B15:  MOVF   58,W
0B16:  MOVWF  6C
0B17:  MOVF   57,W
0B18:  MOVWF  6B
0B19:  MOVF   56,W
0B1A:  MOVWF  6A
0B1B:  MOVF   55,W
0B1C:  MOVWF  69
0B1D:  BCF    0A.3
0B1E:  CALL   33E
0B1F:  BSF    0A.3
0B20:  MOVF   7A,W
0B21:  MOVWF  5D
0B22:  MOVF   79,W
0B23:  MOVWF  5C
0B24:  MOVF   78,W
0B25:  MOVWF  5B
0B26:  MOVF   77,W
0B27:  MOVWF  5A
0B28:  BCF    03.1
0B29:  MOVF   5D,W
0B2A:  MOVWF  6C
0B2B:  MOVF   5C,W
0B2C:  MOVWF  6B
0B2D:  MOVF   5B,W
0B2E:  MOVWF  6A
0B2F:  MOVF   5A,W
0B30:  MOVWF  69
0B31:  CLRF   70
0B32:  CLRF   6F
0B33:  CLRF   6E
0B34:  MOVLW  80
0B35:  MOVWF  6D
0B36:  BCF    0A.3
0B37:  CALL   3D8
0B38:  BSF    0A.3
0B39:  MOVF   7A,W
0B3A:  MOVWF  50
0B3B:  MOVF   79,W
0B3C:  MOVWF  4F
0B3D:  MOVF   78,W
0B3E:  MOVWF  4E
0B3F:  MOVF   77,W
0B40:  MOVWF  4D
.................... 
....................       r = ql[0]*y2 + ql[1];
0B41:  MOVLW  4C
0B42:  MOVWF  68
0B43:  MOVLW  F3
0B44:  MOVWF  67
0B45:  MOVLW  3A
0B46:  MOVWF  66
0B47:  MOVLW  7B
0B48:  MOVWF  65
0B49:  MOVF   58,W
0B4A:  MOVWF  6C
0B4B:  MOVF   57,W
0B4C:  MOVWF  6B
0B4D:  MOVF   56,W
0B4E:  MOVWF  6A
0B4F:  MOVF   55,W
0B50:  MOVWF  69
0B51:  BCF    0A.3
0B52:  CALL   33E
0B53:  BSF    0A.3
0B54:  MOVF   7A,W
0B55:  MOVWF  5D
0B56:  MOVF   79,W
0B57:  MOVWF  5C
0B58:  MOVF   78,W
0B59:  MOVWF  5B
0B5A:  MOVF   77,W
0B5B:  MOVWF  5A
0B5C:  BCF    03.1
0B5D:  MOVF   5D,W
0B5E:  MOVWF  6C
0B5F:  MOVF   5C,W
0B60:  MOVWF  6B
0B61:  MOVF   5B,W
0B62:  MOVWF  6A
0B63:  MOVF   5A,W
0B64:  MOVWF  69
0B65:  MOVLW  2B
0B66:  MOVWF  70
0B67:  MOVLW  9D
0B68:  MOVWF  6F
0B69:  MOVLW  DF
0B6A:  MOVWF  6E
0B6B:  MOVLW  7E
0B6C:  MOVWF  6D
0B6D:  BCF    0A.3
0B6E:  CALL   3D8
0B6F:  BSF    0A.3
0B70:  MOVF   7A,W
0B71:  MOVWF  54
0B72:  MOVF   79,W
0B73:  MOVWF  53
0B74:  MOVF   78,W
0B75:  MOVWF  52
0B76:  MOVF   77,W
0B77:  MOVWF  51
....................       r = r*y2 + 1.0;
0B78:  MOVF   54,W
0B79:  MOVWF  68
0B7A:  MOVF   53,W
0B7B:  MOVWF  67
0B7C:  MOVF   52,W
0B7D:  MOVWF  66
0B7E:  MOVF   51,W
0B7F:  MOVWF  65
0B80:  MOVF   58,W
0B81:  MOVWF  6C
0B82:  MOVF   57,W
0B83:  MOVWF  6B
0B84:  MOVF   56,W
0B85:  MOVWF  6A
0B86:  MOVF   55,W
0B87:  MOVWF  69
0B88:  BCF    0A.3
0B89:  CALL   33E
0B8A:  BSF    0A.3
0B8B:  MOVF   7A,W
0B8C:  MOVWF  5D
0B8D:  MOVF   79,W
0B8E:  MOVWF  5C
0B8F:  MOVF   78,W
0B90:  MOVWF  5B
0B91:  MOVF   77,W
0B92:  MOVWF  5A
0B93:  BCF    03.1
0B94:  MOVF   5D,W
0B95:  MOVWF  6C
0B96:  MOVF   5C,W
0B97:  MOVWF  6B
0B98:  MOVF   5B,W
0B99:  MOVWF  6A
0B9A:  MOVF   5A,W
0B9B:  MOVWF  69
0B9C:  CLRF   70
0B9D:  CLRF   6F
0B9E:  CLRF   6E
0B9F:  MOVLW  7F
0BA0:  MOVWF  6D
0BA1:  BCF    0A.3
0BA2:  CALL   3D8
0BA3:  BSF    0A.3
0BA4:  MOVF   7A,W
0BA5:  MOVWF  54
0BA6:  MOVF   79,W
0BA7:  MOVWF  53
0BA8:  MOVF   78,W
0BA9:  MOVWF  52
0BAA:  MOVF   77,W
0BAB:  MOVWF  51
.................... 
....................       res = y*res/r;
0BAC:  MOVF   4C,W
0BAD:  MOVWF  68
0BAE:  MOVF   4B,W
0BAF:  MOVWF  67
0BB0:  MOVF   4A,W
0BB1:  MOVWF  66
0BB2:  MOVF   49,W
0BB3:  MOVWF  65
0BB4:  MOVF   50,W
0BB5:  MOVWF  6C
0BB6:  MOVF   4F,W
0BB7:  MOVWF  6B
0BB8:  MOVF   4E,W
0BB9:  MOVWF  6A
0BBA:  MOVF   4D,W
0BBB:  MOVWF  69
0BBC:  BCF    0A.3
0BBD:  CALL   33E
0BBE:  BSF    0A.3
0BBF:  MOVF   7A,W
0BC0:  MOVWF  5D
0BC1:  MOVF   79,W
0BC2:  MOVWF  5C
0BC3:  MOVF   78,W
0BC4:  MOVWF  5B
0BC5:  MOVF   77,W
0BC6:  MOVWF  5A
0BC7:  MOVF   5D,W
0BC8:  MOVWF  61
0BC9:  MOVF   5C,W
0BCA:  MOVWF  60
0BCB:  MOVF   5B,W
0BCC:  MOVWF  5F
0BCD:  MOVF   5A,W
0BCE:  MOVWF  5E
0BCF:  MOVF   54,W
0BD0:  MOVWF  65
0BD1:  MOVF   53,W
0BD2:  MOVWF  64
0BD3:  MOVF   52,W
0BD4:  MOVWF  63
0BD5:  MOVF   51,W
0BD6:  MOVWF  62
0BD7:  BCF    0A.3
0BD8:  CALL   6B7
0BD9:  BSF    0A.3
0BDA:  MOVF   7A,W
0BDB:  MOVWF  50
0BDC:  MOVF   79,W
0BDD:  MOVWF  4F
0BDE:  MOVF   78,W
0BDF:  MOVWF  4E
0BE0:  MOVF   77,W
0BE1:  MOVWF  4D
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
0BE2:  CLRF   5B
0BE3:  MOVLW  45
0BE4:  MOVWF  5A
0BE5:  MOVF   5A,W
0BE6:  MOVWF  04
0BE7:  BCF    03.7
0BE8:  BTFSC  5B.0
0BE9:  BSF    03.7
0BEA:  MOVLW  7E
0BEB:  SUBWF  00,W
0BEC:  MOVWF  59
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
0BED:  BTFSS  59.7
0BEE:  GOTO   402
....................          r = -(float32)-n;
0BEF:  MOVF   59,W
0BF0:  SUBLW  00
0BF1:  CLRF   5C
0BF2:  MOVWF  5B
0BF3:  BTFSC  5B.7
0BF4:  DECF   5C,F
0BF5:  BCF    0A.3
0BF6:  CALL   7A0
0BF7:  BSF    0A.3
0BF8:  MOVF   77,W
0BF9:  MOVWF  51
0BFA:  MOVF   78,W
0BFB:  XORLW  80
0BFC:  MOVWF  52
0BFD:  MOVF   79,W
0BFE:  MOVWF  53
0BFF:  MOVF   7A,W
0C00:  MOVWF  54
0C01:  GOTO   412
....................       else
....................          r = (float32)n;
0C02:  CLRF   5C
0C03:  MOVF   59,W
0C04:  MOVWF  5B
0C05:  BTFSC  5B.7
0C06:  DECF   5C,F
0C07:  BCF    0A.3
0C08:  CALL   7A0
0C09:  BSF    0A.3
0C0A:  MOVF   7A,W
0C0B:  MOVWF  54
0C0C:  MOVF   79,W
0C0D:  MOVWF  53
0C0E:  MOVF   78,W
0C0F:  MOVWF  52
0C10:  MOVF   77,W
0C11:  MOVWF  51
.................... 
....................       res += r*LN2;
0C12:  MOVF   54,W
0C13:  MOVWF  68
0C14:  MOVF   53,W
0C15:  MOVWF  67
0C16:  MOVF   52,W
0C17:  MOVWF  66
0C18:  MOVF   51,W
0C19:  MOVWF  65
0C1A:  MOVLW  18
0C1B:  MOVWF  6C
0C1C:  MOVLW  72
0C1D:  MOVWF  6B
0C1E:  MOVLW  31
0C1F:  MOVWF  6A
0C20:  MOVLW  7E
0C21:  MOVWF  69
0C22:  BCF    0A.3
0C23:  CALL   33E
0C24:  BSF    0A.3
0C25:  BCF    03.1
0C26:  MOVF   50,W
0C27:  MOVWF  6C
0C28:  MOVF   4F,W
0C29:  MOVWF  6B
0C2A:  MOVF   4E,W
0C2B:  MOVWF  6A
0C2C:  MOVF   4D,W
0C2D:  MOVWF  69
0C2E:  MOVF   7A,W
0C2F:  MOVWF  70
0C30:  MOVF   79,W
0C31:  MOVWF  6F
0C32:  MOVF   78,W
0C33:  MOVWF  6E
0C34:  MOVF   77,W
0C35:  MOVWF  6D
0C36:  BCF    0A.3
0C37:  CALL   3D8
0C38:  BSF    0A.3
0C39:  MOVF   7A,W
0C3A:  MOVWF  50
0C3B:  MOVF   79,W
0C3C:  MOVWF  4F
0C3D:  MOVF   78,W
0C3E:  MOVWF  4E
0C3F:  MOVF   77,W
0C40:  MOVWF  4D
....................    }
0C41:  GOTO   446
.................... 
....................    else
....................       res = 0.0;
0C42:  CLRF   50
0C43:  CLRF   4F
0C44:  CLRF   4E
0C45:  CLRF   4D
.................... 
....................    return(res);
0C46:  MOVF   4D,W
0C47:  MOVWF  77
0C48:  MOVF   4E,W
0C49:  MOVWF  78
0C4A:  MOVF   4F,W
0C4B:  MOVWF  79
0C4C:  MOVF   50,W
0C4D:  MOVWF  7A
0C4E:  RETURN
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
*
0E52:  MOVF   3C,W
0E53:  MOVWF  68
0E54:  MOVF   3B,W
0E55:  MOVWF  67
0E56:  MOVF   3A,W
0E57:  MOVWF  66
0E58:  MOVF   39,W
0E59:  MOVWF  65
0E5A:  CLRF   6C
0E5B:  CLRF   6B
0E5C:  CLRF   6A
0E5D:  CLRF   69
0E5E:  BCF    0A.3
0E5F:  CALL   549
0E60:  BSF    0A.3
0E61:  BTFSS  03.0
0E62:  GOTO   731
0E63:  MOVF   40,W
0E64:  MOVWF  44
0E65:  MOVF   3F,W
0E66:  MOVWF  43
0E67:  MOVF   3E,W
0E68:  MOVWF  42
0E69:  MOVF   3D,W
0E6A:  MOVWF  41
0E6B:  CLRF   48
0E6C:  CLRF   47
0E6D:  CLRF   46
0E6E:  MOVLW  7F
0E6F:  MOVWF  45
0E70:  CALL   1BF
0E71:  MOVF   7A,W
0E72:  MOVWF  44
0E73:  MOVF   79,W
0E74:  MOVWF  43
0E75:  MOVF   78,W
0E76:  MOVWF  42
0E77:  MOVF   77,W
0E78:  MOVWF  41
0E79:  MOVF   44,W
0E7A:  MOVWF  68
0E7B:  MOVF   43,W
0E7C:  MOVWF  67
0E7D:  MOVF   42,W
0E7E:  MOVWF  66
0E7F:  MOVF   41,W
0E80:  MOVWF  65
0E81:  CLRF   6C
0E82:  CLRF   6B
0E83:  CLRF   6A
0E84:  CLRF   69
0E85:  BCF    0A.3
0E86:  CALL   549
0E87:  BSF    0A.3
0E88:  BTFSS  03.2
0E89:  GOTO   731
....................       if(fmod(y, 2) == 0) {
0E8A:  MOVF   40,W
0E8B:  MOVWF  44
0E8C:  MOVF   3F,W
0E8D:  MOVWF  43
0E8E:  MOVF   3E,W
0E8F:  MOVWF  42
0E90:  MOVF   3D,W
0E91:  MOVWF  41
0E92:  CLRF   48
0E93:  CLRF   47
0E94:  CLRF   46
0E95:  MOVLW  80
0E96:  MOVWF  45
0E97:  CALL   1BF
0E98:  MOVF   7A,W
0E99:  MOVWF  44
0E9A:  MOVF   79,W
0E9B:  MOVWF  43
0E9C:  MOVF   78,W
0E9D:  MOVWF  42
0E9E:  MOVF   77,W
0E9F:  MOVWF  41
0EA0:  MOVF   44,W
0EA1:  MOVWF  68
0EA2:  MOVF   43,W
0EA3:  MOVWF  67
0EA4:  MOVF   42,W
0EA5:  MOVWF  66
0EA6:  MOVF   41,W
0EA7:  MOVWF  65
0EA8:  CLRF   6C
0EA9:  CLRF   6B
0EAA:  CLRF   6A
0EAB:  CLRF   69
0EAC:  BCF    0A.3
0EAD:  CALL   549
0EAE:  BSF    0A.3
0EAF:  BTFSS  03.2
0EB0:  GOTO   6F0
....................          return (exp(log(-x) * y));
0EB1:  MOVF   39,W
0EB2:  MOVWF  41
0EB3:  MOVF   3A,W
0EB4:  XORLW  80
0EB5:  MOVWF  42
0EB6:  MOVF   3B,W
0EB7:  MOVWF  43
0EB8:  MOVF   3C,W
0EB9:  MOVWF  44
0EBA:  MOVWF  48
0EBB:  MOVF   43,W
0EBC:  MOVWF  47
0EBD:  MOVF   42,W
0EBE:  MOVWF  46
0EBF:  MOVF   41,W
0EC0:  MOVWF  45
0EC1:  CALL   289
0EC2:  MOVF   7A,W
0EC3:  MOVWF  44
0EC4:  MOVF   79,W
0EC5:  MOVWF  43
0EC6:  MOVF   78,W
0EC7:  MOVWF  42
0EC8:  MOVF   77,W
0EC9:  MOVWF  41
0ECA:  MOVF   44,W
0ECB:  MOVWF  68
0ECC:  MOVF   43,W
0ECD:  MOVWF  67
0ECE:  MOVF   42,W
0ECF:  MOVWF  66
0ED0:  MOVF   41,W
0ED1:  MOVWF  65
0ED2:  MOVF   40,W
0ED3:  MOVWF  6C
0ED4:  MOVF   3F,W
0ED5:  MOVWF  6B
0ED6:  MOVF   3E,W
0ED7:  MOVWF  6A
0ED8:  MOVF   3D,W
0ED9:  MOVWF  69
0EDA:  BCF    0A.3
0EDB:  CALL   33E
0EDC:  BSF    0A.3
0EDD:  MOVF   7A,W
0EDE:  MOVWF  44
0EDF:  MOVF   79,W
0EE0:  MOVWF  43
0EE1:  MOVF   78,W
0EE2:  MOVWF  42
0EE3:  MOVF   77,W
0EE4:  MOVWF  41
0EE5:  MOVF   44,W
0EE6:  MOVWF  48
0EE7:  MOVF   43,W
0EE8:  MOVWF  47
0EE9:  MOVF   42,W
0EEA:  MOVWF  46
0EEB:  MOVF   41,W
0EEC:  MOVWF  45
0EED:  CALL   44F
0EEE:  GOTO   7CE
....................       } else {
0EEF:  GOTO   730
....................          return (-exp(log(-x) * y));
0EF0:  MOVF   39,W
0EF1:  MOVWF  41
0EF2:  MOVF   3A,W
0EF3:  XORLW  80
0EF4:  MOVWF  42
0EF5:  MOVF   3B,W
0EF6:  MOVWF  43
0EF7:  MOVF   3C,W
0EF8:  MOVWF  44
0EF9:  MOVWF  48
0EFA:  MOVF   43,W
0EFB:  MOVWF  47
0EFC:  MOVF   42,W
0EFD:  MOVWF  46
0EFE:  MOVF   41,W
0EFF:  MOVWF  45
0F00:  CALL   289
0F01:  MOVF   7A,W
0F02:  MOVWF  44
0F03:  MOVF   79,W
0F04:  MOVWF  43
0F05:  MOVF   78,W
0F06:  MOVWF  42
0F07:  MOVF   77,W
0F08:  MOVWF  41
0F09:  MOVF   44,W
0F0A:  MOVWF  68
0F0B:  MOVF   43,W
0F0C:  MOVWF  67
0F0D:  MOVF   42,W
0F0E:  MOVWF  66
0F0F:  MOVF   41,W
0F10:  MOVWF  65
0F11:  MOVF   40,W
0F12:  MOVWF  6C
0F13:  MOVF   3F,W
0F14:  MOVWF  6B
0F15:  MOVF   3E,W
0F16:  MOVWF  6A
0F17:  MOVF   3D,W
0F18:  MOVWF  69
0F19:  BCF    0A.3
0F1A:  CALL   33E
0F1B:  BSF    0A.3
0F1C:  MOVF   7A,W
0F1D:  MOVWF  44
0F1E:  MOVF   79,W
0F1F:  MOVWF  43
0F20:  MOVF   78,W
0F21:  MOVWF  42
0F22:  MOVF   77,W
0F23:  MOVWF  41
0F24:  MOVF   44,W
0F25:  MOVWF  48
0F26:  MOVF   43,W
0F27:  MOVWF  47
0F28:  MOVF   42,W
0F29:  MOVWF  46
0F2A:  MOVF   41,W
0F2B:  MOVWF  45
0F2C:  CALL   44F
0F2D:  MOVLW  80
0F2E:  XORWF  78,F
0F2F:  GOTO   7CE
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
0F30:  GOTO   7CE
0F31:  MOVF   3C,W
0F32:  MOVWF  68
0F33:  MOVF   3B,W
0F34:  MOVWF  67
0F35:  MOVF   3A,W
0F36:  MOVWF  66
0F37:  MOVF   39,W
0F38:  MOVWF  65
0F39:  CLRF   6C
0F3A:  CLRF   6B
0F3B:  CLRF   6A
0F3C:  CLRF   69
0F3D:  BCF    0A.3
0F3E:  CALL   549
0F3F:  BSF    0A.3
0F40:  BTFSS  03.0
0F41:  GOTO   76F
0F42:  MOVF   40,W
0F43:  MOVWF  44
0F44:  MOVF   3F,W
0F45:  MOVWF  43
0F46:  MOVF   3E,W
0F47:  MOVWF  42
0F48:  MOVF   3D,W
0F49:  MOVWF  41
0F4A:  CLRF   48
0F4B:  CLRF   47
0F4C:  CLRF   46
0F4D:  MOVLW  7F
0F4E:  MOVWF  45
0F4F:  CALL   1BF
0F50:  MOVF   7A,W
0F51:  MOVWF  44
0F52:  MOVF   79,W
0F53:  MOVWF  43
0F54:  MOVF   78,W
0F55:  MOVWF  42
0F56:  MOVF   77,W
0F57:  MOVWF  41
0F58:  MOVF   44,W
0F59:  MOVWF  68
0F5A:  MOVF   43,W
0F5B:  MOVWF  67
0F5C:  MOVF   42,W
0F5D:  MOVWF  66
0F5E:  MOVF   41,W
0F5F:  MOVWF  65
0F60:  CLRF   6C
0F61:  CLRF   6B
0F62:  CLRF   6A
0F63:  CLRF   69
0F64:  BCF    0A.3
0F65:  CALL   549
0F66:  BSF    0A.3
0F67:  BTFSC  03.2
0F68:  GOTO   76F
....................       return 0;
0F69:  CLRF   77
0F6A:  CLRF   78
0F6B:  CLRF   79
0F6C:  CLRF   7A
0F6D:  GOTO   7CE
....................    } else {
0F6E:  GOTO   7CE
....................       if(x != 0 || 0 >= y) {
0F6F:  MOVF   3C,W
0F70:  MOVWF  68
0F71:  MOVF   3B,W
0F72:  MOVWF  67
0F73:  MOVF   3A,W
0F74:  MOVWF  66
0F75:  MOVF   39,W
0F76:  MOVWF  65
0F77:  CLRF   6C
0F78:  CLRF   6B
0F79:  CLRF   6A
0F7A:  CLRF   69
0F7B:  BCF    0A.3
0F7C:  CALL   549
0F7D:  BSF    0A.3
0F7E:  BTFSS  03.2
0F7F:  GOTO   793
0F80:  MOVF   40,W
0F81:  MOVWF  68
0F82:  MOVF   3F,W
0F83:  MOVWF  67
0F84:  MOVF   3E,W
0F85:  MOVWF  66
0F86:  MOVF   3D,W
0F87:  MOVWF  65
0F88:  CLRF   6C
0F89:  CLRF   6B
0F8A:  CLRF   6A
0F8B:  CLRF   69
0F8C:  BCF    0A.3
0F8D:  CALL   549
0F8E:  BSF    0A.3
0F8F:  BTFSC  03.0
0F90:  GOTO   793
0F91:  BTFSS  03.2
0F92:  GOTO   7CA
....................          return (exp(log(x) * y));
0F93:  MOVF   3C,W
0F94:  MOVWF  48
0F95:  MOVF   3B,W
0F96:  MOVWF  47
0F97:  MOVF   3A,W
0F98:  MOVWF  46
0F99:  MOVF   39,W
0F9A:  MOVWF  45
0F9B:  CALL   289
0F9C:  MOVF   7A,W
0F9D:  MOVWF  44
0F9E:  MOVF   79,W
0F9F:  MOVWF  43
0FA0:  MOVF   78,W
0FA1:  MOVWF  42
0FA2:  MOVF   77,W
0FA3:  MOVWF  41
0FA4:  MOVF   44,W
0FA5:  MOVWF  68
0FA6:  MOVF   43,W
0FA7:  MOVWF  67
0FA8:  MOVF   42,W
0FA9:  MOVWF  66
0FAA:  MOVF   41,W
0FAB:  MOVWF  65
0FAC:  MOVF   40,W
0FAD:  MOVWF  6C
0FAE:  MOVF   3F,W
0FAF:  MOVWF  6B
0FB0:  MOVF   3E,W
0FB1:  MOVWF  6A
0FB2:  MOVF   3D,W
0FB3:  MOVWF  69
0FB4:  BCF    0A.3
0FB5:  CALL   33E
0FB6:  BSF    0A.3
0FB7:  MOVF   7A,W
0FB8:  MOVWF  44
0FB9:  MOVF   79,W
0FBA:  MOVWF  43
0FBB:  MOVF   78,W
0FBC:  MOVWF  42
0FBD:  MOVF   77,W
0FBE:  MOVWF  41
0FBF:  MOVF   44,W
0FC0:  MOVWF  48
0FC1:  MOVF   43,W
0FC2:  MOVWF  47
0FC3:  MOVF   42,W
0FC4:  MOVWF  46
0FC5:  MOVF   41,W
0FC6:  MOVWF  45
0FC7:  CALL   44F
0FC8:  GOTO   7CE
....................       } else return 0;
0FC9:  GOTO   7CE
0FCA:  CLRF   77
0FCB:  CLRF   78
0FCC:  CLRF   79
0FCD:  CLRF   7A
....................    }
0FCE:  BCF    0A.3
0FCF:  BSF    0A.4
0FD0:  GOTO   21D (RETURN)
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=4000000)
*
001F:  MOVLW  4B
0020:  MOVWF  04
0021:  BCF    03.7
0022:  MOVF   00,W
0023:  BTFSC  03.2
0024:  GOTO   033
0025:  MOVLW  01
0026:  MOVWF  78
0027:  CLRF   77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 78,F
002B:  GOTO   027
002C:  MOVLW  4A
002D:  MOVWF  77
002E:  DECFSZ 77,F
002F:  GOTO   02E
0030:  GOTO   031
0031:  DECFSZ 00,F
0032:  GOTO   025
0033:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C..
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_B2
.................... //!#define LCD_ENABLE_PIN     PIN_B3
.................... //!#define LCD_DATA4          PIN_B4
.................... //!#define LCD_DATA5          PIN_B5
.................... //!#define LCD_DATA6          PIN_B6
.................... //!#define LCD_DATA7          PIN_B7 
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... 
.................... 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, con tro, nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
00E7:  BSF    03.5
00E8:  BCF    08.4
.................... output_drive(LCD_DATA5);
00E9:  BCF    08.5
.................... output_drive(LCD_DATA6);
00EA:  BCF    08.6
.................... output_drive(LCD_DATA7);
00EB:  BCF    08.7
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
00EC:  BCF    08.3
.................... lcd_rs_tris();
00ED:  BCF    08.1
.................... lcd_rw_tris();
00EE:  BCF    08.2
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
00EF:  BCF    03.5
00F0:  BCF    08.1
00F1:  BSF    03.5
00F2:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
00F3:  BCF    03.5
00F4:  BCF    08.2
00F5:  BSF    03.5
00F6:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00F7:  BCF    03.5
00F8:  BCF    08.3
00F9:  BSF    03.5
00FA:  BCF    08.3
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
00FB:  MOVLW  0F
00FC:  BCF    03.5
00FD:  MOVWF  4B
00FE:  CALL   01F
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
00FF:  MOVLW  01
0100:  MOVWF  39
0101:  MOVF   39,W
0102:  SUBLW  03
0103:  BTFSS  03.0
0104:  GOTO   10D
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
0105:  MOVLW  03
0106:  MOVWF  52
0107:  CALL   034
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
0108:  MOVLW  05
0109:  MOVWF  4B
010A:  CALL   01F
010B:  INCF   39,F
010C:  GOTO   101
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
010D:  MOVLW  02
010E:  MOVWF  52
010F:  CALL   034
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
0110:  CLRF   39
0111:  MOVF   39,W
0112:  SUBLW  03
0113:  BTFSS  03.0
0114:  GOTO   11E
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0115:  MOVF   39,W
0116:  CALL   004
0117:  MOVWF  3A
0118:  CLRF   4F
0119:  MOVF   3A,W
011A:  MOVWF  50
011B:  CALL   090
011C:  INCF   39,F
011D:  GOTO   111
011E:  BCF    0A.3
011F:  BSF    0A.4
0120:  GOTO   01C (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
0093:  BSF    08.4
.................... output_float(LCD_DATA5);
0094:  BSF    08.5
.................... output_float(LCD_DATA6);
0095:  BSF    08.6
.................... output_float(LCD_DATA7);
0096:  BSF    08.7
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
0097:  BCF    03.5
0098:  BSF    08.2
0099:  BSF    03.5
009A:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
009B:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
009C:  BCF    03.5
009D:  BSF    08.3
009E:  BSF    03.5
009F:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A0:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
00A1:  BCF    03.5
00A2:  CALL   05F
00A3:  MOVF   78,W
00A4:  MOVWF  52
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00A5:  BCF    08.3
00A6:  BSF    03.5
00A7:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A8:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
00A9:  BCF    03.5
00AA:  BSF    08.3
00AB:  BSF    03.5
00AC:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00AD:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
00AE:  BCF    03.5
00AF:  CALL   05F
00B0:  MOVF   78,W
00B1:  MOVWF  51
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00B2:  BCF    08.3
00B3:  BSF    03.5
00B4:  BCF    08.3
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
00B5:  BCF    08.4
.................... output_drive(LCD_DATA5);
00B6:  BCF    08.5
.................... output_drive(LCD_DATA6);
00B7:  BCF    08.6
.................... output_drive(LCD_DATA7);
00B8:  BCF    08.7
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
00B9:  BCF    03.5
00BA:  SWAPF  52,W
00BB:  MOVWF  77
00BC:  MOVLW  F0
00BD:  ANDWF  77,F
00BE:  MOVF   77,W
00BF:  IORWF  51,W
00C0:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
005F:  CLRF   53
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
0060:  BSF    03.5
0061:  BSF    08.4
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  08.4
0065:  MOVLW  01
0066:  IORWF  53,F
.................... n |= input(LCD_DATA5) << 1;
0067:  BSF    03.5
0068:  BSF    08.5
0069:  MOVLW  00
006A:  BCF    03.5
006B:  BTFSC  08.5
006C:  MOVLW  01
006D:  MOVWF  77
006E:  BCF    03.0
006F:  RLF    77,F
0070:  MOVF   77,W
0071:  IORWF  53,F
.................... n |= input(LCD_DATA6) << 2;
0072:  BSF    03.5
0073:  BSF    08.6
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.6
0077:  MOVLW  01
0078:  MOVWF  77
0079:  RLF    77,F
007A:  RLF    77,F
007B:  MOVLW  FC
007C:  ANDWF  77,F
007D:  MOVF   77,W
007E:  IORWF  53,F
.................... n |= input(LCD_DATA7) << 3;
007F:  BSF    03.5
0080:  BSF    08.7
0081:  MOVLW  00
0082:  BCF    03.5
0083:  BTFSC  08.7
0084:  MOVLW  01
0085:  MOVWF  77
0086:  RLF    77,F
0087:  RLF    77,F
0088:  RLF    77,F
0089:  MOVLW  F8
008A:  ANDWF  77,F
008B:  MOVF   77,W
008C:  IORWF  53,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
008D:  MOVF   53,W
008E:  MOVWF  78
008F:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
0090:  BCF    08.1
0091:  BSF    03.5
0092:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
00C1:  MOVF   78,W
00C2:  MOVWF  51
00C3:  BTFSS  51.7
00C4:  GOTO   0C7
00C5:  BSF    03.5
00C6:  GOTO   093
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
00C7:  MOVF   4F,F
00C8:  BTFSS  03.2
00C9:  GOTO   0CC
00CA:  BCF    08.1
00CB:  GOTO   0CD
00CC:  BSF    08.1
00CD:  BSF    03.5
00CE:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00CF:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
00D0:  BCF    03.5
00D1:  BCF    08.2
00D2:  BSF    03.5
00D3:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00D4:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
00D5:  BCF    03.5
00D6:  BCF    08.3
00D7:  BSF    03.5
00D8:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
00D9:  BCF    03.5
00DA:  SWAPF  50,W
00DB:  MOVWF  51
00DC:  MOVLW  0F
00DD:  ANDWF  51,F
00DE:  MOVF   51,W
00DF:  MOVWF  52
00E0:  CALL   034
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
00E1:  MOVF   50,W
00E2:  ANDLW  0F
00E3:  MOVWF  51
00E4:  MOVWF  52
00E5:  CALL   034
00E6:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
0034:  BTFSC  52.0
0035:  GOTO   038
0036:  BCF    08.4
0037:  GOTO   039
0038:  BSF    08.4
0039:  BSF    03.5
003A:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1));
003B:  BCF    03.5
003C:  BTFSC  52.1
003D:  GOTO   040
003E:  BCF    08.5
003F:  GOTO   041
0040:  BSF    08.5
0041:  BSF    03.5
0042:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2));
0043:  BCF    03.5
0044:  BTFSC  52.2
0045:  GOTO   048
0046:  BCF    08.6
0047:  GOTO   049
0048:  BSF    08.6
0049:  BSF    03.5
004A:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3));
004B:  BCF    03.5
004C:  BTFSC  52.3
004D:  GOTO   050
004E:  BCF    08.7
004F:  GOTO   051
0050:  BSF    08.7
0051:  BSF    03.5
0052:  BCF    08.7
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0053:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
0054:  BCF    03.5
0055:  BSF    08.3
0056:  BSF    03.5
0057:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
0058:  GOTO   059
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
0059:  BCF    03.5
005A:  BCF    08.3
005B:  BSF    03.5
005C:  BCF    08.3
005D:  BCF    03.5
005E:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
0121:  DECFSZ 4C,W
0122:  GOTO   125
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
0123:  CLRF   4D
0124:  GOTO   139
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
0125:  MOVF   4C,W
0126:  SUBLW  02
0127:  BTFSS  03.2
0128:  GOTO   12C
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
0129:  MOVLW  40
012A:  MOVWF  4D
012B:  GOTO   139
.................... else if(y==3)
012C:  MOVF   4C,W
012D:  SUBLW  03
012E:  BTFSS  03.2
012F:  GOTO   133
....................    address=lcd_line_three;     
0130:  MOVLW  14
0131:  MOVWF  4D
0132:  GOTO   139
.................... else if(y==4)
0133:  MOVF   4C,W
0134:  SUBLW  04
0135:  BTFSS  03.2
0136:  GOTO   139
....................    address=lcd_line_four;   
0137:  MOVLW  54
0138:  MOVWF  4D
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
0139:  MOVLW  01
013A:  SUBWF  4B,W
013B:  ADDWF  4D,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
013C:  MOVF   4D,W
013D:  IORLW  80
013E:  MOVWF  4E
013F:  CLRF   4F
0140:  MOVF   4E,W
0141:  MOVWF  50
0142:  CALL   090
0143:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
0144:  MOVF   4A,W
0145:  XORLW  0C
0146:  BTFSC  03.2
0147:  GOTO   14F
0148:  XORLW  06
0149:  BTFSC  03.2
014A:  GOTO   157
014B:  XORLW  02
014C:  BTFSC  03.2
014D:  GOTO   15D
014E:  GOTO   162
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
014F:  CLRF   4F
0150:  MOVLW  01
0151:  MOVWF  50
0152:  CALL   090
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
0153:  MOVLW  02
0154:  MOVWF  4B
0155:  CALL   01F
....................       break;
0156:  GOTO   167
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0157:  MOVLW  01
0158:  MOVWF  4B
0159:  MOVLW  02
015A:  MOVWF  4C
015B:  CALL   121
....................       break;
015C:  GOTO   167
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
015D:  CLRF   4F
015E:  MOVLW  10
015F:  MOVWF  50
0160:  CALL   090
....................       break;               // Lenh: Doi con tro sang trai (0x10).
0161:  GOTO   167
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD.
0162:  MOVLW  01
0163:  MOVWF  4F
0164:  MOVF   4A,W
0165:  MOVWF  50
0166:  CALL   090
....................       break;
....................    }
0167:  RETURN
.................... }      
.................... // ***************************************************   
.................... 
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... float _CharToNumber (Char Key)
.................... {  return(Key - '0');
*
03D0:  MOVLW  30
03D1:  SUBWF  3D,W
03D2:  CLRF   6A
03D3:  MOVWF  69
03D4:  CALL   3B3
03D5:  BCF    0A.3
03D6:  BSF    0A.4
03D7:  GOTO   099 (RETURN)
.................... }
.................... float entering_value = 0 ;
.................... float first_value = 0 ;
.................... char flat ;
.................... void _ReturnStart (void) ;
.................... void main()
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  FF
1004:  MOVWF  20
1005:  CLRF   24
1006:  CLRF   23
1007:  CLRF   22
1008:  CLRF   21
1009:  CLRF   28
100A:  CLRF   27
100B:  CLRF   26
100C:  CLRF   25
100D:  CLRF   2B
100E:  CLRF   2A
100F:  BSF    03.5
1010:  BSF    1F.0
1011:  BSF    1F.1
1012:  BSF    1F.2
1013:  BCF    1F.3
1014:  MOVLW  07
1015:  MOVWF  1C
1016:  BCF    03.7
1017:  MOVLW  61
1018:  BCF    03.5
1019:  MOVWF  2C
.................... {
....................     char Key = 'a' ;
....................     lcd_init() ; //khoi tao lcd
101A:  BCF    0A.4
101B:  GOTO   0E7
101C:  BSF    0A.4
....................     lcd_putc('\f') ;//xoa trang man hinh lcd put char
101D:  MOVLW  0C
101E:  MOVWF  4A
101F:  BCF    0A.4
1020:  CALL   144
1021:  BSF    0A.4
....................     
....................     _KhoiTaoBanPhim() ;
1022:  BCF    0A.4
1023:  GOTO   168
1024:  BSF    0A.4
....................     
....................     lcd_gotoxy(1,1) ;
1025:  MOVLW  01
1026:  MOVWF  4B
1027:  MOVWF  4C
1028:  BCF    0A.4
1029:  CALL   121
102A:  BSF    0A.4
....................     printf(lcd_putc,"Calculator") ;
102B:  MOVLW  0C
102C:  BSF    03.6
102D:  MOVWF  0D
102E:  MOVLW  00
102F:  MOVWF  0F
1030:  BCF    0A.4
1031:  BCF    03.6
1032:  CALL   189
1033:  BSF    0A.4
....................     lcd_gotoxy(1,2) ;
1034:  MOVLW  01
1035:  MOVWF  4B
1036:  MOVLW  02
1037:  MOVWF  4C
1038:  BCF    0A.4
1039:  CALL   121
103A:  BSF    0A.4
....................     printf(lcd_putc,Key) ;
103B:  MOVF   2C,W
103C:  MOVWF  04
103D:  BCF    03.7
103E:  BTFSC  2D.0
103F:  BSF    03.7
1040:  BCF    0A.4
1041:  GOTO   1DF
1042:  BSF    0A.4
....................     delay_ms(1000) ;
1043:  MOVLW  04
1044:  MOVWF  39
1045:  MOVLW  FA
1046:  MOVWF  4B
1047:  BCF    0A.4
1048:  CALL   01F
1049:  BSF    0A.4
104A:  DECFSZ 39,F
104B:  GOTO   045
....................     lcd_putc('\f') ;
104C:  MOVLW  0C
104D:  MOVWF  4A
104E:  BCF    0A.4
104F:  CALL   144
1050:  BSF    0A.4
....................     float entering_value = 0 ;
....................     float first_value = 0 ;
1051:  CLRF   30
1052:  CLRF   2F
1053:  CLRF   2E
1054:  CLRF   2D
1055:  CLRF   34
1056:  CLRF   33
1057:  CLRF   32
1058:  CLRF   31
....................     lcd_gotoxy(1, 1);
1059:  MOVLW  01
105A:  MOVWF  4B
105B:  MOVWF  4C
105C:  BCF    0A.4
105D:  CALL   121
105E:  BSF    0A.4
....................     
....................     while(TRUE)
....................     {
....................        Key = _QuetPhimNhan();
105F:  BCF    0A.4
1060:  CALL   291
1061:  BSF    0A.4
1062:  MOVF   78,W
1063:  MOVWF  2C
....................        if(Key != 'a')
1064:  MOVF   2C,W
1065:  SUBLW  61
1066:  BTFSC  03.2
1067:  GOTO   06F
....................        {
....................           if(Key == 'F')
1068:  MOVF   2C,W
1069:  SUBLW  46
106A:  BTFSS  03.2
106B:  GOTO   06F
....................           {
....................              _ReturnStart();
106C:  BCF    0A.4
106D:  GOTO   32A
106E:  BSF    0A.4
....................          }
....................       }
....................       if (Key >= '0' && Key <= '9')
106F:  MOVF   2C,W
1070:  SUBLW  2F
1071:  BTFSC  03.0
1072:  GOTO   0C1
1073:  MOVF   2C,W
1074:  SUBLW  39
1075:  BTFSS  03.0
1076:  GOTO   0C1
....................       {
....................          lcd_putc(Key);
1077:  MOVF   2C,W
1078:  MOVWF  4A
1079:  BCF    0A.4
107A:  CALL   144
107B:  BSF    0A.4
....................          entering_value = entering_value*10 + _CharToNumber(Key);
107C:  MOVF   30,W
107D:  MOVWF  68
107E:  MOVF   2F,W
107F:  MOVWF  67
1080:  MOVF   2E,W
1081:  MOVWF  66
1082:  MOVF   2D,W
1083:  MOVWF  65
1084:  CLRF   6C
1085:  CLRF   6B
1086:  MOVLW  20
1087:  MOVWF  6A
1088:  MOVLW  82
1089:  MOVWF  69
108A:  BCF    0A.4
108B:  CALL   33E
108C:  BSF    0A.4
108D:  MOVF   7A,W
108E:  MOVWF  3C
108F:  MOVF   79,W
1090:  MOVWF  3B
1091:  MOVF   78,W
1092:  MOVWF  3A
1093:  MOVF   77,W
1094:  MOVWF  39
1095:  MOVF   2C,W
1096:  MOVWF  3D
1097:  BCF    0A.4
1098:  GOTO   3D0
1099:  BSF    0A.4
109A:  CLRF   3E
109B:  MOVF   04,W
109C:  MOVWF  3D
109D:  BCF    3E.0
109E:  BTFSC  03.7
109F:  BSF    3E.0
10A0:  BCF    03.1
10A1:  MOVF   3C,W
10A2:  MOVWF  6C
10A3:  MOVF   3B,W
10A4:  MOVWF  6B
10A5:  MOVF   3A,W
10A6:  MOVWF  6A
10A7:  MOVF   39,W
10A8:  MOVWF  69
10A9:  MOVF   7A,W
10AA:  MOVWF  70
10AB:  MOVF   79,W
10AC:  MOVWF  6F
10AD:  MOVF   78,W
10AE:  MOVWF  6E
10AF:  MOVF   77,W
10B0:  MOVWF  6D
10B1:  BCF    0A.4
10B2:  CALL   3D8
10B3:  BSF    0A.4
10B4:  MOVF   3D,W
10B5:  MOVWF  04
10B6:  BCF    03.7
10B7:  BTFSC  3E.0
10B8:  BSF    03.7
10B9:  MOVF   7A,W
10BA:  MOVWF  30
10BB:  MOVF   79,W
10BC:  MOVWF  2F
10BD:  MOVF   78,W
10BE:  MOVWF  2E
10BF:  MOVF   77,W
10C0:  MOVWF  2D
....................       }
....................       if(Key == '+' || Key == '-' || Key == 'x' || Key == '/' || Key == '^')
10C1:  MOVF   2C,W
10C2:  SUBLW  2B
10C3:  BTFSC  03.2
10C4:  GOTO   0D5
10C5:  MOVF   2C,W
10C6:  SUBLW  2D
10C7:  BTFSC  03.2
10C8:  GOTO   0D5
10C9:  MOVF   2C,W
10CA:  SUBLW  78
10CB:  BTFSC  03.2
10CC:  GOTO   0D5
10CD:  MOVF   2C,W
10CE:  SUBLW  2F
10CF:  BTFSC  03.2
10D0:  GOTO   0D5
10D1:  MOVF   2C,W
10D2:  SUBLW  5E
10D3:  BTFSS  03.2
10D4:  GOTO   0E8
....................       {
....................          lcd_putc(Key);
10D5:  MOVF   2C,W
10D6:  MOVWF  4A
10D7:  BCF    0A.4
10D8:  CALL   144
10D9:  BSF    0A.4
....................          first_value = entering_value;
10DA:  MOVF   30,W
10DB:  MOVWF  34
10DC:  MOVF   2F,W
10DD:  MOVWF  33
10DE:  MOVF   2E,W
10DF:  MOVWF  32
10E0:  MOVF   2D,W
10E1:  MOVWF  31
....................          entering_value = 0;
10E2:  CLRF   30
10E3:  CLRF   2F
10E4:  CLRF   2E
10E5:  CLRF   2D
....................          flat = Key;
10E6:  MOVF   2C,W
10E7:  MOVWF  29
....................          
....................       }
....................       if(Key == '=')
10E8:  MOVF   2C,W
10E9:  SUBLW  3D
10EA:  BTFSS  03.2
10EB:  GOTO   236
....................       {
....................          lcd_putc(Key);
10EC:  MOVF   2C,W
10ED:  MOVWF  4A
10EE:  BCF    0A.4
10EF:  CALL   144
10F0:  BSF    0A.4
....................          lcd_gotoxy(1, 2);
10F1:  MOVLW  01
10F2:  MOVWF  4B
10F3:  MOVLW  02
10F4:  MOVWF  4C
10F5:  BCF    0A.4
10F6:  CALL   121
10F7:  BSF    0A.4
....................          if(entering_value == 0)
10F8:  MOVF   30,W
10F9:  MOVWF  68
10FA:  MOVF   2F,W
10FB:  MOVWF  67
10FC:  MOVF   2E,W
10FD:  MOVWF  66
10FE:  MOVF   2D,W
10FF:  MOVWF  65
1100:  CLRF   6C
1101:  CLRF   6B
1102:  CLRF   6A
1103:  CLRF   69
1104:  BCF    0A.4
1105:  CALL   549
1106:  BSF    0A.4
1107:  BTFSS  03.2
1108:  GOTO   112
....................          {
....................             printf(lcd_putc,"Nhap Lai");
1109:  MOVLW  12
110A:  BSF    03.6
110B:  MOVWF  0D
110C:  MOVLW  00
110D:  MOVWF  0F
110E:  BCF    0A.4
110F:  BCF    03.6
1110:  CALL   189
1111:  BSF    0A.4
....................          }
....................          switch(flat)
1112:  MOVF   29,W
1113:  XORLW  2B
1114:  BTFSC  03.2
1115:  GOTO   123
1116:  XORLW  06
1117:  BTFSC  03.2
1118:  GOTO   14E
1119:  XORLW  55
111A:  BTFSC  03.2
111B:  GOTO   179
111C:  XORLW  57
111D:  BTFSC  03.2
111E:  GOTO   1A3
111F:  XORLW  71
1120:  BTFSC  03.2
1121:  GOTO   1F3
1122:  GOTO   1E9
....................          {
....................              case '+':
....................                printf(lcd_putc,"%.0f", first_value + entering_value);
1123:  BCF    03.1
1124:  MOVF   34,W
1125:  MOVWF  6C
1126:  MOVF   33,W
1127:  MOVWF  6B
1128:  MOVF   32,W
1129:  MOVWF  6A
112A:  MOVF   31,W
112B:  MOVWF  69
112C:  MOVF   30,W
112D:  MOVWF  70
112E:  MOVF   2F,W
112F:  MOVWF  6F
1130:  MOVF   2E,W
1131:  MOVWF  6E
1132:  MOVF   2D,W
1133:  MOVWF  6D
1134:  BCF    0A.4
1135:  CALL   3D8
1136:  BSF    0A.4
1137:  MOVF   7A,W
1138:  MOVWF  3C
1139:  MOVF   79,W
113A:  MOVWF  3B
113B:  MOVF   78,W
113C:  MOVWF  3A
113D:  MOVF   77,W
113E:  MOVWF  39
113F:  MOVLW  89
1140:  MOVWF  04
1141:  MOVF   3C,W
1142:  MOVWF  40
1143:  MOVF   3B,W
1144:  MOVWF  3F
1145:  MOVF   3A,W
1146:  MOVWF  3E
1147:  MOVF   39,W
1148:  MOVWF  3D
1149:  CLRF   41
114A:  BCF    0A.4
114B:  CALL   5D7
114C:  BSF    0A.4
....................              break;
114D:  GOTO   236
....................              case '-':
....................                printf(lcd_putc,"%.0f", first_value - entering_value);
114E:  BSF    03.1
114F:  MOVF   34,W
1150:  MOVWF  6C
1151:  MOVF   33,W
1152:  MOVWF  6B
1153:  MOVF   32,W
1154:  MOVWF  6A
1155:  MOVF   31,W
1156:  MOVWF  69
1157:  MOVF   30,W
1158:  MOVWF  70
1159:  MOVF   2F,W
115A:  MOVWF  6F
115B:  MOVF   2E,W
115C:  MOVWF  6E
115D:  MOVF   2D,W
115E:  MOVWF  6D
115F:  BCF    0A.4
1160:  CALL   3D8
1161:  BSF    0A.4
1162:  MOVF   7A,W
1163:  MOVWF  3C
1164:  MOVF   79,W
1165:  MOVWF  3B
1166:  MOVF   78,W
1167:  MOVWF  3A
1168:  MOVF   77,W
1169:  MOVWF  39
116A:  MOVLW  89
116B:  MOVWF  04
116C:  MOVF   3C,W
116D:  MOVWF  40
116E:  MOVF   3B,W
116F:  MOVWF  3F
1170:  MOVF   3A,W
1171:  MOVWF  3E
1172:  MOVF   39,W
1173:  MOVWF  3D
1174:  CLRF   41
1175:  BCF    0A.4
1176:  CALL   5D7
1177:  BSF    0A.4
....................              break;
1178:  GOTO   236
....................              case 'x':
....................                printf(lcd_putc,"%.0f", first_value * entering_value);
1179:  MOVF   34,W
117A:  MOVWF  68
117B:  MOVF   33,W
117C:  MOVWF  67
117D:  MOVF   32,W
117E:  MOVWF  66
117F:  MOVF   31,W
1180:  MOVWF  65
1181:  MOVF   30,W
1182:  MOVWF  6C
1183:  MOVF   2F,W
1184:  MOVWF  6B
1185:  MOVF   2E,W
1186:  MOVWF  6A
1187:  MOVF   2D,W
1188:  MOVWF  69
1189:  BCF    0A.4
118A:  CALL   33E
118B:  BSF    0A.4
118C:  MOVF   7A,W
118D:  MOVWF  3C
118E:  MOVF   79,W
118F:  MOVWF  3B
1190:  MOVF   78,W
1191:  MOVWF  3A
1192:  MOVF   77,W
1193:  MOVWF  39
1194:  MOVLW  89
1195:  MOVWF  04
1196:  MOVF   3C,W
1197:  MOVWF  40
1198:  MOVF   3B,W
1199:  MOVWF  3F
119A:  MOVF   3A,W
119B:  MOVWF  3E
119C:  MOVF   39,W
119D:  MOVWF  3D
119E:  CLRF   41
119F:  BCF    0A.4
11A0:  CALL   5D7
11A1:  BSF    0A.4
....................              break;
11A2:  GOTO   236
....................              case '/':
....................                 if(entering_value == 0)
11A3:  MOVF   30,W
11A4:  MOVWF  68
11A5:  MOVF   2F,W
11A6:  MOVWF  67
11A7:  MOVF   2E,W
11A8:  MOVWF  66
11A9:  MOVF   2D,W
11AA:  MOVWF  65
11AB:  CLRF   6C
11AC:  CLRF   6B
11AD:  CLRF   6A
11AE:  CLRF   69
11AF:  BCF    0A.4
11B0:  CALL   549
11B1:  BSF    0A.4
11B2:  BTFSS  03.2
11B3:  GOTO   1BE
....................                 {
....................                    printf(lcd_putc,"Error");
11B4:  MOVLW  17
11B5:  BSF    03.6
11B6:  MOVWF  0D
11B7:  MOVLW  00
11B8:  MOVWF  0F
11B9:  BCF    0A.4
11BA:  BCF    03.6
11BB:  CALL   189
11BC:  BSF    0A.4
....................                 
....................                }
11BD:  GOTO   1E8
....................                else
....................                
....................                {
....................                    float tru;
....................                    tru = first_value / entering_value;
11BE:  MOVF   34,W
11BF:  MOVWF  61
11C0:  MOVF   33,W
11C1:  MOVWF  60
11C2:  MOVF   32,W
11C3:  MOVWF  5F
11C4:  MOVF   31,W
11C5:  MOVWF  5E
11C6:  MOVF   30,W
11C7:  MOVWF  65
11C8:  MOVF   2F,W
11C9:  MOVWF  64
11CA:  MOVF   2E,W
11CB:  MOVWF  63
11CC:  MOVF   2D,W
11CD:  MOVWF  62
11CE:  BCF    0A.4
11CF:  CALL   6B7
11D0:  BSF    0A.4
11D1:  MOVF   7A,W
11D2:  MOVWF  38
11D3:  MOVF   79,W
11D4:  MOVWF  37
11D5:  MOVF   78,W
11D6:  MOVWF  36
11D7:  MOVF   77,W
11D8:  MOVWF  35
....................                    printf(lcd_putc,"%.3f",tru);
11D9:  MOVLW  89
11DA:  MOVWF  04
11DB:  MOVF   38,W
11DC:  MOVWF  40
11DD:  MOVF   37,W
11DE:  MOVWF  3F
11DF:  MOVF   36,W
11E0:  MOVWF  3E
11E1:  MOVF   35,W
11E2:  MOVWF  3D
11E3:  MOVLW  03
11E4:  MOVWF  41
11E5:  BCF    0A.4
11E6:  CALL   5D7
11E7:  BSF    0A.4
....................                }
....................             break;
11E8:  GOTO   236
....................             default:
....................                 printf(lcd_putc,"Nhap Lai");
11E9:  MOVLW  1A
11EA:  BSF    03.6
11EB:  MOVWF  0D
11EC:  MOVLW  00
11ED:  MOVWF  0F
11EE:  BCF    0A.4
11EF:  BCF    03.6
11F0:  CALL   189
11F1:  BSF    0A.4
....................             break;
11F2:  GOTO   236
....................             case '^':
....................                if(entering_value == 0)
11F3:  MOVF   30,W
11F4:  MOVWF  68
11F5:  MOVF   2F,W
11F6:  MOVWF  67
11F7:  MOVF   2E,W
11F8:  MOVWF  66
11F9:  MOVF   2D,W
11FA:  MOVWF  65
11FB:  CLRF   6C
11FC:  CLRF   6B
11FD:  CLRF   6A
11FE:  CLRF   69
11FF:  BCF    0A.4
1200:  CALL   549
1201:  BSF    0A.4
1202:  BTFSS  03.2
1203:  GOTO   20A
....................                {
....................                   printf(lcd_putc,"1");
1204:  MOVLW  31
1205:  MOVWF  4A
1206:  BCF    0A.4
1207:  CALL   144
1208:  BSF    0A.4
....................                }
1209:  GOTO   236
....................                else
....................                {
....................                   printf(lcd_putc,"%.3f", pow(first_value, entering_value));
120A:  MOVF   34,W
120B:  MOVWF  3C
120C:  MOVF   33,W
120D:  MOVWF  3B
120E:  MOVF   32,W
120F:  MOVWF  3A
1210:  MOVF   31,W
1211:  MOVWF  39
1212:  MOVF   30,W
1213:  MOVWF  40
1214:  MOVF   2F,W
1215:  MOVWF  3F
1216:  MOVF   2E,W
1217:  MOVWF  3E
1218:  MOVF   2D,W
1219:  MOVWF  3D
121A:  BCF    0A.4
121B:  BSF    0A.3
121C:  GOTO   652
121D:  BSF    0A.4
121E:  BCF    0A.3
121F:  MOVF   7A,W
1220:  MOVWF  3C
1221:  MOVF   79,W
1222:  MOVWF  3B
1223:  MOVF   78,W
1224:  MOVWF  3A
1225:  MOVF   77,W
1226:  MOVWF  39
1227:  MOVLW  89
1228:  MOVWF  04
1229:  MOVF   3C,W
122A:  MOVWF  40
122B:  MOVF   3B,W
122C:  MOVWF  3F
122D:  MOVF   3A,W
122E:  MOVWF  3E
122F:  MOVF   39,W
1230:  MOVWF  3D
1231:  MOVLW  03
1232:  MOVWF  41
1233:  BCF    0A.4
1234:  CALL   5D7
1235:  BSF    0A.4
....................                }
....................                 
....................              
....................          }
....................       }
....................       while(Key != 'a')
1236:  MOVF   2C,W
1237:  SUBLW  61
1238:  BTFSC  03.2
1239:  GOTO   240
....................       {
....................          Key = _QuetPhimNhan();
123A:  BCF    0A.4
123B:  CALL   291
123C:  BSF    0A.4
123D:  MOVF   78,W
123E:  MOVWF  2C
123F:  GOTO   236
....................       }
1240:  GOTO   05F
....................    
....................       
....................    }
....................                
.................... 
....................    
.................... }
.................... void _ReturnStart()
1241:  SLEEP
.................... {
....................    lcd_putc('\f');
*
032A:  MOVLW  0C
032B:  MOVWF  4A
032C:  CALL   144
....................    lcd_gotoxy(1, 1);
032D:  MOVLW  01
032E:  MOVWF  4B
032F:  MOVWF  4C
0330:  CALL   121
....................    entering_value = 0;
0331:  CLRF   24
0332:  CLRF   23
0333:  CLRF   22
0334:  CLRF   21
....................    first_value = 0;
0335:  CLRF   28
0336:  CLRF   27
0337:  CLRF   26
0338:  CLRF   25
....................    flat = 'a';
0339:  MOVLW  61
033A:  MOVWF  29
033B:  BCF    0A.3
033C:  BSF    0A.4
033D:  GOTO   06E (RETURN)
....................    
.................... }

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
